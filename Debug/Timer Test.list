
Timer Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002860  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002958  08002958  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002958  08002958  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002958  08002958  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000010  08002970  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002970  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000945a  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000165c  00000000  00000000  00029492  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b20  00000000  00000000  0002aaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001693b  00000000  00000000  0002c068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008081  00000000  00000000  000429a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c080  00000000  00000000  0004aa24  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c6aa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e0  00000000  00000000  000c6b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002908 	.word	0x08002908

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08002908 	.word	0x08002908

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 faf2 	bl	800080c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f80e 	bl	8000248 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f902 	bl	8000434 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000230:	f000 f8cc 	bl	80003cc <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000234:	f000 f868 	bl	8000308 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000238:	4b02      	ldr	r3, [pc, #8]	; (8000244 <main+0x24>)
 800023a:	0018      	movs	r0, r3
 800023c:	f001 fc02 	bl	8001a44 <HAL_TIM_Base_Start_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x20>
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	2000002c 	.word	0x2000002c

08000248 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000248:	b590      	push	{r4, r7, lr}
 800024a:	b099      	sub	sp, #100	; 0x64
 800024c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800024e:	242c      	movs	r4, #44	; 0x2c
 8000250:	193b      	adds	r3, r7, r4
 8000252:	0018      	movs	r0, r3
 8000254:	2334      	movs	r3, #52	; 0x34
 8000256:	001a      	movs	r2, r3
 8000258:	2100      	movs	r1, #0
 800025a:	f002 fb4d 	bl	80028f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800025e:	231c      	movs	r3, #28
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	0018      	movs	r0, r3
 8000264:	2310      	movs	r3, #16
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f002 fb45 	bl	80028f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800026e:	003b      	movs	r3, r7
 8000270:	0018      	movs	r0, r3
 8000272:	231c      	movs	r3, #28
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f002 fb3e 	bl	80028f8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800027c:	193b      	adds	r3, r7, r4
 800027e:	2220      	movs	r2, #32
 8000280:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000282:	193b      	adds	r3, r7, r4
 8000284:	2201      	movs	r2, #1
 8000286:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000288:	193b      	adds	r3, r7, r4
 800028a:	2200      	movs	r2, #0
 800028c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028e:	193b      	adds	r3, r7, r4
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fdad 	bl	8000df0 <HAL_RCC_OscConfig>
 8000296:	0003      	movs	r3, r0
 8000298:	1e5a      	subs	r2, r3, #1
 800029a:	4193      	sbcs	r3, r2
 800029c:	b2db      	uxtb	r3, r3
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <_Z18SystemClock_Configv+0x5e>
  {
    Error_Handler();
 80002a2:	f000 f9c3 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	211c      	movs	r1, #28
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2207      	movs	r2, #7
 80002ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2203      	movs	r2, #3
 80002b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2101      	movs	r1, #1
 80002c4:	0018      	movs	r0, r3
 80002c6:	f001 f919 	bl	80014fc <HAL_RCC_ClockConfig>
 80002ca:	0003      	movs	r3, r0
 80002cc:	1e5a      	subs	r2, r3, #1
 80002ce:	4193      	sbcs	r3, r2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 80002d6:	f000 f9a9 	bl	800062c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002da:	003b      	movs	r3, r7
 80002dc:	2202      	movs	r2, #2
 80002de:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002e0:	003b      	movs	r3, r7
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002e6:	003b      	movs	r3, r7
 80002e8:	0018      	movs	r0, r3
 80002ea:	f001 fa7f 	bl	80017ec <HAL_RCCEx_PeriphCLKConfig>
 80002ee:	0003      	movs	r3, r0
 80002f0:	1e5a      	subs	r2, r3, #1
 80002f2:	4193      	sbcs	r3, r2
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80002fa:	f000 f997 	bl	800062c <Error_Handler>
  }
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b019      	add	sp, #100	; 0x64
 8000304:	bd90      	pop	{r4, r7, pc}
	...

08000308 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b086      	sub	sp, #24
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800030e:	2308      	movs	r3, #8
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	0018      	movs	r0, r3
 8000314:	2310      	movs	r3, #16
 8000316:	001a      	movs	r2, r3
 8000318:	2100      	movs	r1, #0
 800031a:	f002 faed 	bl	80028f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800031e:	003b      	movs	r3, r7
 8000320:	0018      	movs	r0, r3
 8000322:	2308      	movs	r3, #8
 8000324:	001a      	movs	r2, r3
 8000326:	2100      	movs	r1, #0
 8000328:	f002 fae6 	bl	80028f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032c:	4b24      	ldr	r3, [pc, #144]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	05d2      	lsls	r2, r2, #23
 8000332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000336:	4a23      	ldr	r2, [pc, #140]	; (80003c4 <_ZL12MX_TIM2_Initv+0xbc>)
 8000338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033a:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7500;
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000342:	4a21      	ldr	r2, [pc, #132]	; (80003c8 <_ZL12MX_TIM2_Initv+0xc0>)
 8000344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000346:	4b1e      	ldr	r3, [pc, #120]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034c:	4b1c      	ldr	r3, [pc, #112]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 fb49 	bl	80019ec <HAL_TIM_Base_Init>
 800035a:	0003      	movs	r3, r0
 800035c:	1e5a      	subs	r2, r3, #1
 800035e:	4193      	sbcs	r3, r2
 8000360:	b2db      	uxtb	r3, r3
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <_ZL12MX_TIM2_Initv+0x62>
  {
    Error_Handler();
 8000366:	f000 f961 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036a:	2108      	movs	r1, #8
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2280      	movs	r2, #128	; 0x80
 8000370:	0152      	lsls	r2, r2, #5
 8000372:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000374:	187a      	adds	r2, r7, r1
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 8000378:	0011      	movs	r1, r2
 800037a:	0018      	movs	r0, r3
 800037c:	f001 fc9a 	bl	8001cb4 <HAL_TIM_ConfigClockSource>
 8000380:	0003      	movs	r3, r0
 8000382:	1e5a      	subs	r2, r3, #1
 8000384:	4193      	sbcs	r3, r2
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 800038c:	f000 f94e 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	003b      	movs	r3, r7
 8000392:	2200      	movs	r2, #0
 8000394:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000396:	003b      	movs	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800039c:	003a      	movs	r2, r7
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <_ZL12MX_TIM2_Initv+0xb8>)
 80003a0:	0011      	movs	r1, r2
 80003a2:	0018      	movs	r0, r3
 80003a4:	f001 fe7e 	bl	80020a4 <HAL_TIMEx_MasterConfigSynchronization>
 80003a8:	0003      	movs	r3, r0
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	4193      	sbcs	r3, r2
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <_ZL12MX_TIM2_Initv+0xb0>
  {
    Error_Handler();
 80003b4:	f000 f93a 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b006      	add	sp, #24
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2000002c 	.word	0x2000002c
 80003c4:	00007cff 	.word	0x00007cff
 80003c8:	00001d4c 	.word	0x00001d4c

080003cc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003d2:	4a17      	ldr	r2, [pc, #92]	; (8000430 <_ZL19MX_USART2_UART_Initv+0x64>)
 80003d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003d8:	2296      	movs	r2, #150	; 0x96
 80003da:	0212      	lsls	r2, r2, #8
 80003dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b11      	ldr	r3, [pc, #68]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b10      	ldr	r3, [pc, #64]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b0e      	ldr	r3, [pc, #56]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b0d      	ldr	r3, [pc, #52]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b0b      	ldr	r3, [pc, #44]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 800040a:	2200      	movs	r2, #0
 800040c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040e:	4b07      	ldr	r3, [pc, #28]	; (800042c <_ZL19MX_USART2_UART_Initv+0x60>)
 8000410:	0018      	movs	r0, r3
 8000412:	f001 feb5 	bl	8002180 <HAL_UART_Init>
 8000416:	0003      	movs	r3, r0
 8000418:	1e5a      	subs	r2, r3, #1
 800041a:	4193      	sbcs	r3, r2
 800041c:	b2db      	uxtb	r3, r3
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <_ZL19MX_USART2_UART_Initv+0x5a>
  {
    Error_Handler();
 8000422:	f000 f903 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	2000006c 	.word	0x2000006c
 8000430:	40004400 	.word	0x40004400

08000434 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000434:	b590      	push	{r4, r7, lr}
 8000436:	b08b      	sub	sp, #44	; 0x2c
 8000438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043a:	2414      	movs	r4, #20
 800043c:	193b      	adds	r3, r7, r4
 800043e:	0018      	movs	r0, r3
 8000440:	2314      	movs	r3, #20
 8000442:	001a      	movs	r2, r3
 8000444:	2100      	movs	r1, #0
 8000446:	f002 fa57 	bl	80028f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044a:	4b54      	ldr	r3, [pc, #336]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 800044c:	695a      	ldr	r2, [r3, #20]
 800044e:	4b53      	ldr	r3, [pc, #332]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 8000450:	2180      	movs	r1, #128	; 0x80
 8000452:	0309      	lsls	r1, r1, #12
 8000454:	430a      	orrs	r2, r1
 8000456:	615a      	str	r2, [r3, #20]
 8000458:	4b50      	ldr	r3, [pc, #320]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 800045a:	695a      	ldr	r2, [r3, #20]
 800045c:	2380      	movs	r3, #128	; 0x80
 800045e:	031b      	lsls	r3, r3, #12
 8000460:	4013      	ands	r3, r2
 8000462:	613b      	str	r3, [r7, #16]
 8000464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000466:	4b4d      	ldr	r3, [pc, #308]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	4b4c      	ldr	r3, [pc, #304]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 800046c:	2180      	movs	r1, #128	; 0x80
 800046e:	03c9      	lsls	r1, r1, #15
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]
 8000474:	4b49      	ldr	r3, [pc, #292]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 8000476:	695a      	ldr	r2, [r3, #20]
 8000478:	2380      	movs	r3, #128	; 0x80
 800047a:	03db      	lsls	r3, r3, #15
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000482:	4b46      	ldr	r3, [pc, #280]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 8000484:	695a      	ldr	r2, [r3, #20]
 8000486:	4b45      	ldr	r3, [pc, #276]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 8000488:	2180      	movs	r1, #128	; 0x80
 800048a:	0289      	lsls	r1, r1, #10
 800048c:	430a      	orrs	r2, r1
 800048e:	615a      	str	r2, [r3, #20]
 8000490:	4b42      	ldr	r3, [pc, #264]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 8000492:	695a      	ldr	r2, [r3, #20]
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	029b      	lsls	r3, r3, #10
 8000498:	4013      	ands	r3, r2
 800049a:	60bb      	str	r3, [r7, #8]
 800049c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b3f      	ldr	r3, [pc, #252]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 80004a0:	695a      	ldr	r2, [r3, #20]
 80004a2:	4b3e      	ldr	r3, [pc, #248]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	02c9      	lsls	r1, r1, #11
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	4b3b      	ldr	r3, [pc, #236]	; (800059c <_ZL12MX_GPIO_Initv+0x168>)
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	2380      	movs	r3, #128	; 0x80
 80004b2:	02db      	lsls	r3, r3, #11
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80004ba:	2390      	movs	r3, #144	; 0x90
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2200      	movs	r2, #0
 80004c0:	21e0      	movs	r1, #224	; 0xe0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f000 fc5c 	bl	8000d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80004c8:	4b35      	ldr	r3, [pc, #212]	; (80005a0 <_ZL12MX_GPIO_Initv+0x16c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	2130      	movs	r1, #48	; 0x30
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fc56 	bl	8000d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004d4:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <_ZL12MX_GPIO_Initv+0x170>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	2101      	movs	r1, #1
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fc50 	bl	8000d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2280      	movs	r2, #128	; 0x80
 80004e4:	0192      	lsls	r2, r2, #6
 80004e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	4a2f      	ldr	r2, [pc, #188]	; (80005a8 <_ZL12MX_GPIO_Initv+0x174>)
 80004ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004f4:	193b      	adds	r3, r7, r4
 80004f6:	4a2a      	ldr	r2, [pc, #168]	; (80005a0 <_ZL12MX_GPIO_Initv+0x16c>)
 80004f8:	0019      	movs	r1, r3
 80004fa:	0010      	movs	r0, r2
 80004fc:	f000 fac8 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2201      	movs	r2, #1
 8000504:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	193b      	adds	r3, r7, r4
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000512:	193b      	adds	r3, r7, r4
 8000514:	4a22      	ldr	r2, [pc, #136]	; (80005a0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000516:	0019      	movs	r1, r3
 8000518:	0010      	movs	r0, r2
 800051a:	f000 fab9 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	22e0      	movs	r2, #224	; 0xe0
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2201      	movs	r2, #1
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	193a      	adds	r2, r7, r4
 8000538:	2390      	movs	r3, #144	; 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f000 faa6 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000544:	0021      	movs	r1, r4
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2230      	movs	r2, #48	; 0x30
 800054a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2201      	movs	r2, #1
 8000550:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055e:	000c      	movs	r4, r1
 8000560:	187b      	adds	r3, r7, r1
 8000562:	4a0f      	ldr	r2, [pc, #60]	; (80005a0 <_ZL12MX_GPIO_Initv+0x16c>)
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f000 fa92 	bl	8000a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2201      	movs	r2, #1
 8000572:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2201      	movs	r2, #1
 8000578:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000586:	187b      	adds	r3, r7, r1
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <_ZL12MX_GPIO_Initv+0x170>)
 800058a:	0019      	movs	r1, r3
 800058c:	0010      	movs	r0, r2
 800058e:	f000 fa7f 	bl	8000a90 <HAL_GPIO_Init>

}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b00b      	add	sp, #44	; 0x2c
 8000598:	bd90      	pop	{r4, r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	48000800 	.word	0x48000800
 80005a4:	48000400 	.word	0x48000400
 80005a8:	10210000 	.word	0x10210000

080005ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

		HAL_GPIO_TogglePin(LD2_Pin_GPIO_Port, LD2_Pin_Pin);
 80005b4:	2390      	movs	r3, #144	; 0x90
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	2120      	movs	r1, #32
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fbfd 	bl	8000dba <HAL_GPIO_TogglePin>

		if (carStarting) {
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d013      	beq.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x44>

			if (mainCounter >= 25) {
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b18      	cmp	r3, #24
 80005ce:	dd06      	ble.n	80005de <HAL_TIM_PeriodElapsedCallback+0x32>

				mainCounter = 0;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
				carStarting = false;
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e008      	b.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x44>
				//turn off signal

			} else if (mainCounter == 24) {
 80005de:	4b10      	ldr	r3, [pc, #64]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b18      	cmp	r3, #24
 80005e4:	d004      	beq.n	80005f0 <HAL_TIM_PeriodElapsedCallback+0x44>



			} else {

				mainCounter++;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005ee:	601a      	str	r2, [r3, #0]

			}

		}

		if (oneSecondCounter >= 5) {
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	dd03      	ble.n	8000600 <HAL_TIM_PeriodElapsedCallback+0x54>

			oneSecondCounter = 0;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]

			oneSecondCounter++;

		}

	}
 80005fe:	e008      	b.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x66>
		} else if (shouldCount) {
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d004      	beq.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x66>
			oneSecondCounter++;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1c5a      	adds	r2, r3, #1
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
	}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b002      	add	sp, #8
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000000 	.word	0x20000000
 8000620:	200000f0 	.word	0x200000f0
 8000624:	200000ec 	.word	0x200000ec
 8000628:	200000f4 	.word	0x200000f4

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <HAL_MspInit+0x44>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <HAL_MspInit+0x44>)
 8000644:	2101      	movs	r1, #1
 8000646:	430a      	orrs	r2, r1
 8000648:	619a      	str	r2, [r3, #24]
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <HAL_MspInit+0x44>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	2201      	movs	r2, #1
 8000650:	4013      	ands	r3, r2
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <HAL_MspInit+0x44>)
 8000658:	69da      	ldr	r2, [r3, #28]
 800065a:	4b08      	ldr	r3, [pc, #32]	; (800067c <HAL_MspInit+0x44>)
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0549      	lsls	r1, r1, #21
 8000660:	430a      	orrs	r2, r1
 8000662:	61da      	str	r2, [r3, #28]
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_MspInit+0x44>)
 8000666:	69da      	ldr	r2, [r3, #28]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	055b      	lsls	r3, r3, #21
 800066c:	4013      	ands	r3, r2
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b002      	add	sp, #8
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	40021000 	.word	0x40021000

08000680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	05db      	lsls	r3, r3, #23
 8000690:	429a      	cmp	r2, r3
 8000692:	d113      	bne.n	80006bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <HAL_TIM_Base_MspInit+0x44>)
 8000696:	69da      	ldr	r2, [r3, #28]
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_TIM_Base_MspInit+0x44>)
 800069a:	2101      	movs	r1, #1
 800069c:	430a      	orrs	r2, r1
 800069e:	61da      	str	r2, [r3, #28]
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_TIM_Base_MspInit+0x44>)
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	2201      	movs	r2, #1
 80006a6:	4013      	ands	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2100      	movs	r1, #0
 80006b0:	200f      	movs	r0, #15
 80006b2:	f000 f9bb 	bl	8000a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f9cd 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b004      	add	sp, #16
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40021000 	.word	0x40021000

080006c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d0:	2314      	movs	r3, #20
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	0018      	movs	r0, r3
 80006d6:	2314      	movs	r3, #20
 80006d8:	001a      	movs	r2, r3
 80006da:	2100      	movs	r1, #0
 80006dc:	f002 f90c 	bl	80028f8 <memset>
  if(huart->Instance==USART2)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <HAL_UART_MspInit+0x90>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d132      	bne.n	8000750 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <HAL_UART_MspInit+0x94>)
 80006ec:	69da      	ldr	r2, [r3, #28]
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <HAL_UART_MspInit+0x94>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0289      	lsls	r1, r1, #10
 80006f4:	430a      	orrs	r2, r1
 80006f6:	61da      	str	r2, [r3, #28]
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <HAL_UART_MspInit+0x94>)
 80006fa:	69da      	ldr	r2, [r3, #28]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	029b      	lsls	r3, r3, #10
 8000700:	4013      	ands	r3, r2
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_UART_MspInit+0x94>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b14      	ldr	r3, [pc, #80]	; (800075c <HAL_UART_MspInit+0x94>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0289      	lsls	r1, r1, #10
 8000710:	430a      	orrs	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <HAL_UART_MspInit+0x94>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	029b      	lsls	r3, r3, #10
 800071c:	4013      	ands	r3, r2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000722:	2114      	movs	r1, #20
 8000724:	187b      	adds	r3, r7, r1
 8000726:	220c      	movs	r2, #12
 8000728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	187b      	adds	r3, r7, r1
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2201      	movs	r2, #1
 8000740:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000742:	187a      	adds	r2, r7, r1
 8000744:	2390      	movs	r3, #144	; 0x90
 8000746:	05db      	lsls	r3, r3, #23
 8000748:	0011      	movs	r1, r2
 800074a:	0018      	movs	r0, r3
 800074c:	f000 f9a0 	bl	8000a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b00a      	add	sp, #40	; 0x28
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40004400 	.word	0x40004400
 800075c:	40021000 	.word	0x40021000

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000774:	46c0      	nop			; (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 f888 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <TIM2_IRQHandler+0x14>)
 800079a:	0018      	movs	r0, r3
 800079c:	f001 f974 	bl	8001a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	2000002c 	.word	0x2000002c

080007ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007be:	490e      	ldr	r1, [pc, #56]	; (80007f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007c0:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <LoopForever+0xe>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d4:	4c0b      	ldr	r4, [pc, #44]	; (8000804 <LoopForever+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007e2:	f7ff ffe3 	bl	80007ac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007e6:	f002 f863 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ea:	f7ff fd19 	bl	8000220 <main>

080007ee <LoopForever>:

LoopForever:
    b LoopForever
 80007ee:	e7fe      	b.n	80007ee <LoopForever>
  ldr   r0, =_estack
 80007f0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80007f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007fc:	08002960 	.word	0x08002960
  ldr r2, =_sbss
 8000800:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000804:	200000fc 	.word	0x200000fc

08000808 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000808:	e7fe      	b.n	8000808 <ADC1_COMP_IRQHandler>
	...

0800080c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_Init+0x24>)
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_Init+0x24>)
 8000816:	2110      	movs	r1, #16
 8000818:	430a      	orrs	r2, r1
 800081a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800081c:	2000      	movs	r0, #0
 800081e:	f000 f809 	bl	8000834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000822:	f7ff ff09 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	40022000 	.word	0x40022000

08000834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <HAL_InitTick+0x5c>)
 800083e:	681c      	ldr	r4, [r3, #0]
 8000840:	4b14      	ldr	r3, [pc, #80]	; (8000894 <HAL_InitTick+0x60>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	0019      	movs	r1, r3
 8000846:	23fa      	movs	r3, #250	; 0xfa
 8000848:	0098      	lsls	r0, r3, #2
 800084a:	f7ff fc5d 	bl	8000108 <__udivsi3>
 800084e:	0003      	movs	r3, r0
 8000850:	0019      	movs	r1, r3
 8000852:	0020      	movs	r0, r4
 8000854:	f7ff fc58 	bl	8000108 <__udivsi3>
 8000858:	0003      	movs	r3, r0
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f90b 	bl	8000a76 <HAL_SYSTICK_Config>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	e00f      	b.n	8000888 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b03      	cmp	r3, #3
 800086c:	d80b      	bhi.n	8000886 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800086e:	6879      	ldr	r1, [r7, #4]
 8000870:	2301      	movs	r3, #1
 8000872:	425b      	negs	r3, r3
 8000874:	2200      	movs	r2, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f8d8 	bl	8000a2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_InitTick+0x64>)
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000882:	2300      	movs	r3, #0
 8000884:	e000      	b.n	8000888 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	b003      	add	sp, #12
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	20000004 	.word	0x20000004
 8000894:	2000000c 	.word	0x2000000c
 8000898:	20000008 	.word	0x20000008

0800089c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x1c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	001a      	movs	r2, r3
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x20>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	18d2      	adds	r2, r2, r3
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <HAL_IncTick+0x20>)
 80008ae:	601a      	str	r2, [r3, #0]
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	2000000c 	.word	0x2000000c
 80008bc:	200000f8 	.word	0x200000f8

080008c0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <HAL_GetTick+0x10>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	0018      	movs	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	200000f8 	.word	0x200000f8

080008d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	0002      	movs	r2, r0
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b7f      	cmp	r3, #127	; 0x7f
 80008e6:	d809      	bhi.n	80008fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e8:	1dfb      	adds	r3, r7, #7
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	001a      	movs	r2, r3
 80008ee:	231f      	movs	r3, #31
 80008f0:	401a      	ands	r2, r3
 80008f2:	4b04      	ldr	r3, [pc, #16]	; (8000904 <__NVIC_EnableIRQ+0x30>)
 80008f4:	2101      	movs	r1, #1
 80008f6:	4091      	lsls	r1, r2
 80008f8:	000a      	movs	r2, r1
 80008fa:	601a      	str	r2, [r3, #0]
  }
}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b002      	add	sp, #8
 8000902:	bd80      	pop	{r7, pc}
 8000904:	e000e100 	.word	0xe000e100

08000908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	0002      	movs	r2, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b7f      	cmp	r3, #127	; 0x7f
 800091c:	d828      	bhi.n	8000970 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091e:	4a2f      	ldr	r2, [pc, #188]	; (80009dc <__NVIC_SetPriority+0xd4>)
 8000920:	1dfb      	adds	r3, r7, #7
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b25b      	sxtb	r3, r3
 8000926:	089b      	lsrs	r3, r3, #2
 8000928:	33c0      	adds	r3, #192	; 0xc0
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	589b      	ldr	r3, [r3, r2]
 800092e:	1dfa      	adds	r2, r7, #7
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	0011      	movs	r1, r2
 8000934:	2203      	movs	r2, #3
 8000936:	400a      	ands	r2, r1
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	21ff      	movs	r1, #255	; 0xff
 800093c:	4091      	lsls	r1, r2
 800093e:	000a      	movs	r2, r1
 8000940:	43d2      	mvns	r2, r2
 8000942:	401a      	ands	r2, r3
 8000944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	019b      	lsls	r3, r3, #6
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	401a      	ands	r2, r3
 800094e:	1dfb      	adds	r3, r7, #7
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	0018      	movs	r0, r3
 8000954:	2303      	movs	r3, #3
 8000956:	4003      	ands	r3, r0
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800095c:	481f      	ldr	r0, [pc, #124]	; (80009dc <__NVIC_SetPriority+0xd4>)
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	430a      	orrs	r2, r1
 8000968:	33c0      	adds	r3, #192	; 0xc0
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800096e:	e031      	b.n	80009d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <__NVIC_SetPriority+0xd8>)
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	0019      	movs	r1, r3
 8000978:	230f      	movs	r3, #15
 800097a:	400b      	ands	r3, r1
 800097c:	3b08      	subs	r3, #8
 800097e:	089b      	lsrs	r3, r3, #2
 8000980:	3306      	adds	r3, #6
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	18d3      	adds	r3, r2, r3
 8000986:	3304      	adds	r3, #4
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1dfa      	adds	r2, r7, #7
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	0011      	movs	r1, r2
 8000990:	2203      	movs	r2, #3
 8000992:	400a      	ands	r2, r1
 8000994:	00d2      	lsls	r2, r2, #3
 8000996:	21ff      	movs	r1, #255	; 0xff
 8000998:	4091      	lsls	r1, r2
 800099a:	000a      	movs	r2, r1
 800099c:	43d2      	mvns	r2, r2
 800099e:	401a      	ands	r2, r3
 80009a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	019b      	lsls	r3, r3, #6
 80009a6:	22ff      	movs	r2, #255	; 0xff
 80009a8:	401a      	ands	r2, r3
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	0018      	movs	r0, r3
 80009b0:	2303      	movs	r3, #3
 80009b2:	4003      	ands	r3, r0
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <__NVIC_SetPriority+0xd8>)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	001c      	movs	r4, r3
 80009c0:	230f      	movs	r3, #15
 80009c2:	4023      	ands	r3, r4
 80009c4:	3b08      	subs	r3, #8
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	430a      	orrs	r2, r1
 80009ca:	3306      	adds	r3, #6
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	18c3      	adds	r3, r0, r3
 80009d0:	3304      	adds	r3, #4
 80009d2:	601a      	str	r2, [r3, #0]
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b003      	add	sp, #12
 80009da:	bd90      	pop	{r4, r7, pc}
 80009dc:	e000e100 	.word	0xe000e100
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	3b01      	subs	r3, #1
 80009f0:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <SysTick_Config+0x40>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d901      	bls.n	80009fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f6:	2301      	movs	r3, #1
 80009f8:	e010      	b.n	8000a1c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <SysTick_Config+0x44>)
 80009fc:	687a      	ldr	r2, [r7, #4]
 80009fe:	3a01      	subs	r2, #1
 8000a00:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a02:	2301      	movs	r3, #1
 8000a04:	425b      	negs	r3, r3
 8000a06:	2103      	movs	r1, #3
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ff7d 	bl	8000908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <SysTick_Config+0x44>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Config+0x44>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a1a:	2300      	movs	r3, #0
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	00ffffff 	.word	0x00ffffff
 8000a28:	e000e010 	.word	0xe000e010

08000a2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	210f      	movs	r1, #15
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	1c02      	adds	r2, r0, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff5d 	bl	8000908 <__NVIC_SetPriority>
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	0002      	movs	r2, r0
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ff33 	bl	80008d4 <__NVIC_EnableIRQ>
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f7ff ffaf 	bl	80009e4 <SysTick_Config>
 8000a86:	0003      	movs	r3, r0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e155      	b.n	8000d4c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4091      	lsls	r1, r2
 8000aaa:	000a      	movs	r2, r1
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d100      	bne.n	8000ab8 <HAL_GPIO_Init+0x28>
 8000ab6:	e146      	b.n	8000d46 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x38>
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b12      	cmp	r3, #18
 8000ac6:	d123      	bne.n	8000b10 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	08da      	lsrs	r2, r3, #3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3208      	adds	r2, #8
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	58d3      	ldr	r3, [r2, r3]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	2207      	movs	r2, #7
 8000ada:	4013      	ands	r3, r2
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	220f      	movs	r2, #15
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	43da      	mvns	r2, r3
 8000ae6:	693b      	ldr	r3, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	691a      	ldr	r2, [r3, #16]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	2107      	movs	r1, #7
 8000af4:	400b      	ands	r3, r1
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	08da      	lsrs	r2, r3, #3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	3208      	adds	r2, #8
 8000b0a:	0092      	lsls	r2, r2, #2
 8000b0c:	6939      	ldr	r1, [r7, #16]
 8000b0e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	409a      	lsls	r2, r3
 8000b1e:	0013      	movs	r3, r2
 8000b20:	43da      	mvns	r2, r3
 8000b22:	693b      	ldr	r3, [r7, #16]
 8000b24:	4013      	ands	r3, r2
 8000b26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d00b      	beq.n	8000b64 <HAL_GPIO_Init+0xd4>
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d007      	beq.n	8000b64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b58:	2b11      	cmp	r3, #17
 8000b5a:	d003      	beq.n	8000b64 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	2b12      	cmp	r3, #18
 8000b62:	d130      	bne.n	8000bc6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2203      	movs	r2, #3
 8000b70:	409a      	lsls	r2, r3
 8000b72:	0013      	movs	r3, r2
 8000b74:	43da      	mvns	r2, r3
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	409a      	lsls	r2, r3
 8000b86:	0013      	movs	r3, r2
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	409a      	lsls	r2, r3
 8000bd4:	0013      	movs	r3, r2
 8000bd6:	43da      	mvns	r2, r3
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	409a      	lsls	r2, r3
 8000be8:	0013      	movs	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	055b      	lsls	r3, r3, #21
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d100      	bne.n	8000c04 <HAL_GPIO_Init+0x174>
 8000c02:	e0a0      	b.n	8000d46 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c04:	4b57      	ldr	r3, [pc, #348]	; (8000d64 <HAL_GPIO_Init+0x2d4>)
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	4b56      	ldr	r3, [pc, #344]	; (8000d64 <HAL_GPIO_Init+0x2d4>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	619a      	str	r2, [r3, #24]
 8000c10:	4b54      	ldr	r3, [pc, #336]	; (8000d64 <HAL_GPIO_Init+0x2d4>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	2201      	movs	r2, #1
 8000c16:	4013      	ands	r3, r2
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c1c:	4a52      	ldr	r2, [pc, #328]	; (8000d68 <HAL_GPIO_Init+0x2d8>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	3302      	adds	r3, #2
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	589b      	ldr	r3, [r3, r2]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	4013      	ands	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	220f      	movs	r2, #15
 8000c34:	409a      	lsls	r2, r3
 8000c36:	0013      	movs	r3, r2
 8000c38:	43da      	mvns	r2, r3
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	2390      	movs	r3, #144	; 0x90
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d019      	beq.n	8000c7e <HAL_GPIO_Init+0x1ee>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a47      	ldr	r2, [pc, #284]	; (8000d6c <HAL_GPIO_Init+0x2dc>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d013      	beq.n	8000c7a <HAL_GPIO_Init+0x1ea>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a46      	ldr	r2, [pc, #280]	; (8000d70 <HAL_GPIO_Init+0x2e0>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d00d      	beq.n	8000c76 <HAL_GPIO_Init+0x1e6>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a45      	ldr	r2, [pc, #276]	; (8000d74 <HAL_GPIO_Init+0x2e4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d007      	beq.n	8000c72 <HAL_GPIO_Init+0x1e2>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a44      	ldr	r2, [pc, #272]	; (8000d78 <HAL_GPIO_Init+0x2e8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d101      	bne.n	8000c6e <HAL_GPIO_Init+0x1de>
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	e008      	b.n	8000c80 <HAL_GPIO_Init+0x1f0>
 8000c6e:	2305      	movs	r3, #5
 8000c70:	e006      	b.n	8000c80 <HAL_GPIO_Init+0x1f0>
 8000c72:	2303      	movs	r3, #3
 8000c74:	e004      	b.n	8000c80 <HAL_GPIO_Init+0x1f0>
 8000c76:	2302      	movs	r3, #2
 8000c78:	e002      	b.n	8000c80 <HAL_GPIO_Init+0x1f0>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e000      	b.n	8000c80 <HAL_GPIO_Init+0x1f0>
 8000c7e:	2300      	movs	r3, #0
 8000c80:	697a      	ldr	r2, [r7, #20]
 8000c82:	2103      	movs	r1, #3
 8000c84:	400a      	ands	r2, r1
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	4093      	lsls	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c90:	4935      	ldr	r1, [pc, #212]	; (8000d68 <HAL_GPIO_Init+0x2d8>)
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	089b      	lsrs	r3, r3, #2
 8000c96:	3302      	adds	r3, #2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c9e:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43da      	mvns	r2, r3
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	2380      	movs	r3, #128	; 0x80
 8000cb4:	025b      	lsls	r3, r3, #9
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	d003      	beq.n	8000cc2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	43da      	mvns	r2, r3
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685a      	ldr	r2, [r3, #4]
 8000cdc:	2380      	movs	r3, #128	; 0x80
 8000cde:	029b      	lsls	r3, r3, #10
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	035b      	lsls	r3, r3, #13
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000d0e:	693a      	ldr	r2, [r7, #16]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	43da      	mvns	r2, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685a      	ldr	r2, [r3, #4]
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	039b      	lsls	r3, r3, #14
 8000d34:	4013      	ands	r3, r2
 8000d36:	d003      	beq.n	8000d40 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <HAL_GPIO_Init+0x2ec>)
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	40da      	lsrs	r2, r3
 8000d54:	1e13      	subs	r3, r2, #0
 8000d56:	d000      	beq.n	8000d5a <HAL_GPIO_Init+0x2ca>
 8000d58:	e6a2      	b.n	8000aa0 <HAL_GPIO_Init+0x10>
  } 
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b006      	add	sp, #24
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48001000 	.word	0x48001000
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	0008      	movs	r0, r1
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	1cbb      	adds	r3, r7, #2
 8000d8e:	1c02      	adds	r2, r0, #0
 8000d90:	801a      	strh	r2, [r3, #0]
 8000d92:	1c7b      	adds	r3, r7, #1
 8000d94:	1c0a      	adds	r2, r1, #0
 8000d96:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d98:	1c7b      	adds	r3, r7, #1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000da0:	1cbb      	adds	r3, r7, #2
 8000da2:	881a      	ldrh	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000da8:	e003      	b.n	8000db2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000daa:	1cbb      	adds	r3, r7, #2
 8000dac:	881a      	ldrh	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b002      	add	sp, #8
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	1cbb      	adds	r3, r7, #2
 8000dc6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	1cba      	adds	r2, r7, #2
 8000dce:	8812      	ldrh	r2, [r2, #0]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	d005      	beq.n	8000de0 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000dd4:	1cbb      	adds	r3, r7, #2
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	041a      	lsls	r2, r3, #16
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000dde:	e003      	b.n	8000de8 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de0:	1cbb      	adds	r3, r7, #2
 8000de2:	881a      	ldrh	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	619a      	str	r2, [r3, #24]
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b002      	add	sp, #8
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d102      	bne.n	8000e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	f000 fb76 	bl	80014f0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	d100      	bne.n	8000e10 <HAL_RCC_OscConfig+0x20>
 8000e0e:	e08e      	b.n	8000f2e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e10:	4bc5      	ldr	r3, [pc, #788]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	220c      	movs	r2, #12
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d00e      	beq.n	8000e3a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e1c:	4bc2      	ldr	r3, [pc, #776]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	220c      	movs	r2, #12
 8000e22:	4013      	ands	r3, r2
 8000e24:	2b08      	cmp	r3, #8
 8000e26:	d117      	bne.n	8000e58 <HAL_RCC_OscConfig+0x68>
 8000e28:	4bbf      	ldr	r3, [pc, #764]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e2a:	685a      	ldr	r2, [r3, #4]
 8000e2c:	23c0      	movs	r3, #192	; 0xc0
 8000e2e:	025b      	lsls	r3, r3, #9
 8000e30:	401a      	ands	r2, r3
 8000e32:	2380      	movs	r3, #128	; 0x80
 8000e34:	025b      	lsls	r3, r3, #9
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d10e      	bne.n	8000e58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e3a:	4bbb      	ldr	r3, [pc, #748]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	029b      	lsls	r3, r3, #10
 8000e42:	4013      	ands	r3, r2
 8000e44:	d100      	bne.n	8000e48 <HAL_RCC_OscConfig+0x58>
 8000e46:	e071      	b.n	8000f2c <HAL_RCC_OscConfig+0x13c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d000      	beq.n	8000e52 <HAL_RCC_OscConfig+0x62>
 8000e50:	e06c      	b.n	8000f2c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	f000 fb4c 	bl	80014f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d107      	bne.n	8000e70 <HAL_RCC_OscConfig+0x80>
 8000e60:	4bb1      	ldr	r3, [pc, #708]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4bb0      	ldr	r3, [pc, #704]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	0249      	lsls	r1, r1, #9
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e02f      	b.n	8000ed0 <HAL_RCC_OscConfig+0xe0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10c      	bne.n	8000e92 <HAL_RCC_OscConfig+0xa2>
 8000e78:	4bab      	ldr	r3, [pc, #684]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4baa      	ldr	r3, [pc, #680]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e7e:	49ab      	ldr	r1, [pc, #684]	; (800112c <HAL_RCC_OscConfig+0x33c>)
 8000e80:	400a      	ands	r2, r1
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	4ba8      	ldr	r3, [pc, #672]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4ba7      	ldr	r3, [pc, #668]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e8a:	49a9      	ldr	r1, [pc, #676]	; (8001130 <HAL_RCC_OscConfig+0x340>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	e01e      	b.n	8000ed0 <HAL_RCC_OscConfig+0xe0>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d10e      	bne.n	8000eb8 <HAL_RCC_OscConfig+0xc8>
 8000e9a:	4ba3      	ldr	r3, [pc, #652]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4ba2      	ldr	r3, [pc, #648]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	02c9      	lsls	r1, r1, #11
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	4b9f      	ldr	r3, [pc, #636]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b9e      	ldr	r3, [pc, #632]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	0249      	lsls	r1, r1, #9
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e00b      	b.n	8000ed0 <HAL_RCC_OscConfig+0xe0>
 8000eb8:	4b9b      	ldr	r3, [pc, #620]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b9a      	ldr	r3, [pc, #616]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000ebe:	499b      	ldr	r1, [pc, #620]	; (800112c <HAL_RCC_OscConfig+0x33c>)
 8000ec0:	400a      	ands	r2, r1
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	4b98      	ldr	r3, [pc, #608]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b97      	ldr	r3, [pc, #604]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000eca:	4999      	ldr	r1, [pc, #612]	; (8001130 <HAL_RCC_OscConfig+0x340>)
 8000ecc:	400a      	ands	r2, r1
 8000ece:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d014      	beq.n	8000f02 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fcf2 	bl	80008c0 <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ee2:	f7ff fced 	bl	80008c0 <HAL_GetTick>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b64      	cmp	r3, #100	; 0x64
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e2fd      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ef4:	4b8c      	ldr	r3, [pc, #560]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	4013      	ands	r3, r2
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0xf2>
 8000f00:	e015      	b.n	8000f2e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f02:	f7ff fcdd 	bl	80008c0 <HAL_GetTick>
 8000f06:	0003      	movs	r3, r0
 8000f08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fcd8 	bl	80008c0 <HAL_GetTick>
 8000f10:	0002      	movs	r2, r0
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	; 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e2e8      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f1e:	4b82      	ldr	r3, [pc, #520]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	029b      	lsls	r3, r3, #10
 8000f26:	4013      	ands	r3, r2
 8000f28:	d1f0      	bne.n	8000f0c <HAL_RCC_OscConfig+0x11c>
 8000f2a:	e000      	b.n	8000f2e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2202      	movs	r2, #2
 8000f34:	4013      	ands	r3, r2
 8000f36:	d100      	bne.n	8000f3a <HAL_RCC_OscConfig+0x14a>
 8000f38:	e06c      	b.n	8001014 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f3a:	4b7b      	ldr	r3, [pc, #492]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	220c      	movs	r2, #12
 8000f40:	4013      	ands	r3, r2
 8000f42:	d00e      	beq.n	8000f62 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f44:	4b78      	ldr	r3, [pc, #480]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	220c      	movs	r2, #12
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d11f      	bne.n	8000f90 <HAL_RCC_OscConfig+0x1a0>
 8000f50:	4b75      	ldr	r3, [pc, #468]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f52:	685a      	ldr	r2, [r3, #4]
 8000f54:	23c0      	movs	r3, #192	; 0xc0
 8000f56:	025b      	lsls	r3, r3, #9
 8000f58:	401a      	ands	r2, r3
 8000f5a:	2380      	movs	r3, #128	; 0x80
 8000f5c:	021b      	lsls	r3, r3, #8
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d116      	bne.n	8000f90 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f62:	4b71      	ldr	r3, [pc, #452]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2202      	movs	r2, #2
 8000f68:	4013      	ands	r3, r2
 8000f6a:	d005      	beq.n	8000f78 <HAL_RCC_OscConfig+0x188>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d001      	beq.n	8000f78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e2bb      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f78:	4b6b      	ldr	r3, [pc, #428]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	22f8      	movs	r2, #248	; 0xf8
 8000f7e:	4393      	bics	r3, r2
 8000f80:	0019      	movs	r1, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	691b      	ldr	r3, [r3, #16]
 8000f86:	00da      	lsls	r2, r3, #3
 8000f88:	4b67      	ldr	r3, [pc, #412]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8e:	e041      	b.n	8001014 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d024      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f98:	4b63      	ldr	r3, [pc, #396]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b62      	ldr	r3, [pc, #392]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa4:	f7ff fc8c 	bl	80008c0 <HAL_GetTick>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fae:	f7ff fc87 	bl	80008c0 <HAL_GetTick>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e297      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc0:	4b59      	ldr	r3, [pc, #356]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d0f1      	beq.n	8000fae <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fca:	4b57      	ldr	r3, [pc, #348]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	22f8      	movs	r2, #248	; 0xf8
 8000fd0:	4393      	bics	r3, r2
 8000fd2:	0019      	movs	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	00da      	lsls	r2, r3, #3
 8000fda:	4b53      	ldr	r3, [pc, #332]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000fdc:	430a      	orrs	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e018      	b.n	8001014 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fe2:	4b51      	ldr	r3, [pc, #324]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b50      	ldr	r3, [pc, #320]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8000fe8:	2101      	movs	r1, #1
 8000fea:	438a      	bics	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fc67 	bl	80008c0 <HAL_GetTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fc62 	bl	80008c0 <HAL_GetTick>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e272      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100a:	4b47      	ldr	r3, [pc, #284]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2202      	movs	r2, #2
 8001010:	4013      	ands	r3, r2
 8001012:	d1f1      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2208      	movs	r2, #8
 800101a:	4013      	ands	r3, r2
 800101c:	d036      	beq.n	800108c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d019      	beq.n	800105a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001026:	4b40      	ldr	r3, [pc, #256]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8001028:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800102a:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 800102c:	2101      	movs	r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001032:	f7ff fc45 	bl	80008c0 <HAL_GetTick>
 8001036:	0003      	movs	r3, r0
 8001038:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fc40 	bl	80008c0 <HAL_GetTick>
 8001040:	0002      	movs	r2, r0
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e250      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104e:	4b36      	ldr	r3, [pc, #216]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	2202      	movs	r2, #2
 8001054:	4013      	ands	r3, r2
 8001056:	d0f1      	beq.n	800103c <HAL_RCC_OscConfig+0x24c>
 8001058:	e018      	b.n	800108c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 800105c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800105e:	4b32      	ldr	r3, [pc, #200]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8001060:	2101      	movs	r1, #1
 8001062:	438a      	bics	r2, r1
 8001064:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fc2b 	bl	80008c0 <HAL_GetTick>
 800106a:	0003      	movs	r3, r0
 800106c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001070:	f7ff fc26 	bl	80008c0 <HAL_GetTick>
 8001074:	0002      	movs	r2, r0
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e236      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2202      	movs	r2, #2
 8001088:	4013      	ands	r3, r2
 800108a:	d1f1      	bne.n	8001070 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2204      	movs	r2, #4
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x2a8>
 8001096:	e0b5      	b.n	8001204 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001098:	231f      	movs	r3, #31
 800109a:	18fb      	adds	r3, r7, r3
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 80010a2:	69da      	ldr	r2, [r3, #28]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	055b      	lsls	r3, r3, #21
 80010a8:	4013      	ands	r3, r2
 80010aa:	d111      	bne.n	80010d0 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010ac:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 80010ae:	69da      	ldr	r2, [r3, #28]
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 80010b2:	2180      	movs	r1, #128	; 0x80
 80010b4:	0549      	lsls	r1, r1, #21
 80010b6:	430a      	orrs	r2, r1
 80010b8:	61da      	str	r2, [r3, #28]
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 80010bc:	69da      	ldr	r2, [r3, #28]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	055b      	lsls	r3, r3, #21
 80010c2:	4013      	ands	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010c8:	231f      	movs	r3, #31
 80010ca:	18fb      	adds	r3, r7, r3
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_RCC_OscConfig+0x344>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	2380      	movs	r3, #128	; 0x80
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4013      	ands	r3, r2
 80010da:	d11a      	bne.n	8001112 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_RCC_OscConfig+0x344>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_RCC_OscConfig+0x344>)
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0049      	lsls	r1, r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fbe9 	bl	80008c0 <HAL_GetTick>
 80010ee:	0003      	movs	r3, r0
 80010f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	e008      	b.n	8001106 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f4:	f7ff fbe4 	bl	80008c0 <HAL_GetTick>
 80010f8:	0002      	movs	r2, r0
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	2b64      	cmp	r3, #100	; 0x64
 8001100:	d901      	bls.n	8001106 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e1f4      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_RCC_OscConfig+0x344>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4013      	ands	r3, r2
 8001110:	d0f0      	beq.n	80010f4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d10e      	bne.n	8001138 <HAL_RCC_OscConfig+0x348>
 800111a:	4b03      	ldr	r3, [pc, #12]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 800111c:	6a1a      	ldr	r2, [r3, #32]
 800111e:	4b02      	ldr	r3, [pc, #8]	; (8001128 <HAL_RCC_OscConfig+0x338>)
 8001120:	2101      	movs	r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	621a      	str	r2, [r3, #32]
 8001126:	e035      	b.n	8001194 <HAL_RCC_OscConfig+0x3a4>
 8001128:	40021000 	.word	0x40021000
 800112c:	fffeffff 	.word	0xfffeffff
 8001130:	fffbffff 	.word	0xfffbffff
 8001134:	40007000 	.word	0x40007000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d10c      	bne.n	800115a <HAL_RCC_OscConfig+0x36a>
 8001140:	4bca      	ldr	r3, [pc, #808]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001142:	6a1a      	ldr	r2, [r3, #32]
 8001144:	4bc9      	ldr	r3, [pc, #804]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001146:	2101      	movs	r1, #1
 8001148:	438a      	bics	r2, r1
 800114a:	621a      	str	r2, [r3, #32]
 800114c:	4bc7      	ldr	r3, [pc, #796]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800114e:	6a1a      	ldr	r2, [r3, #32]
 8001150:	4bc6      	ldr	r3, [pc, #792]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001152:	2104      	movs	r1, #4
 8001154:	438a      	bics	r2, r1
 8001156:	621a      	str	r2, [r3, #32]
 8001158:	e01c      	b.n	8001194 <HAL_RCC_OscConfig+0x3a4>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b05      	cmp	r3, #5
 8001160:	d10c      	bne.n	800117c <HAL_RCC_OscConfig+0x38c>
 8001162:	4bc2      	ldr	r3, [pc, #776]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	4bc1      	ldr	r3, [pc, #772]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001168:	2104      	movs	r1, #4
 800116a:	430a      	orrs	r2, r1
 800116c:	621a      	str	r2, [r3, #32]
 800116e:	4bbf      	ldr	r3, [pc, #764]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001170:	6a1a      	ldr	r2, [r3, #32]
 8001172:	4bbe      	ldr	r3, [pc, #760]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001174:	2101      	movs	r1, #1
 8001176:	430a      	orrs	r2, r1
 8001178:	621a      	str	r2, [r3, #32]
 800117a:	e00b      	b.n	8001194 <HAL_RCC_OscConfig+0x3a4>
 800117c:	4bbb      	ldr	r3, [pc, #748]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800117e:	6a1a      	ldr	r2, [r3, #32]
 8001180:	4bba      	ldr	r3, [pc, #744]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001182:	2101      	movs	r1, #1
 8001184:	438a      	bics	r2, r1
 8001186:	621a      	str	r2, [r3, #32]
 8001188:	4bb8      	ldr	r3, [pc, #736]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	4bb7      	ldr	r3, [pc, #732]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800118e:	2104      	movs	r1, #4
 8001190:	438a      	bics	r2, r1
 8001192:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d014      	beq.n	80011c6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800119c:	f7ff fb90 	bl	80008c0 <HAL_GetTick>
 80011a0:	0003      	movs	r3, r0
 80011a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a4:	e009      	b.n	80011ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a6:	f7ff fb8b 	bl	80008c0 <HAL_GetTick>
 80011aa:	0002      	movs	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	4aaf      	ldr	r2, [pc, #700]	; (8001470 <HAL_RCC_OscConfig+0x680>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e19a      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ba:	4bac      	ldr	r3, [pc, #688]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	2202      	movs	r2, #2
 80011c0:	4013      	ands	r3, r2
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x3b6>
 80011c4:	e013      	b.n	80011ee <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011c6:	f7ff fb7b 	bl	80008c0 <HAL_GetTick>
 80011ca:	0003      	movs	r3, r0
 80011cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011ce:	e009      	b.n	80011e4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011d0:	f7ff fb76 	bl	80008c0 <HAL_GetTick>
 80011d4:	0002      	movs	r2, r0
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	4aa5      	ldr	r2, [pc, #660]	; (8001470 <HAL_RCC_OscConfig+0x680>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e185      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	4ba1      	ldr	r3, [pc, #644]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	2202      	movs	r2, #2
 80011ea:	4013      	ands	r3, r2
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80011ee:	231f      	movs	r3, #31
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d105      	bne.n	8001204 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011f8:	4b9c      	ldr	r3, [pc, #624]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80011fa:	69da      	ldr	r2, [r3, #28]
 80011fc:	4b9b      	ldr	r3, [pc, #620]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80011fe:	499d      	ldr	r1, [pc, #628]	; (8001474 <HAL_RCC_OscConfig+0x684>)
 8001200:	400a      	ands	r2, r1
 8001202:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2210      	movs	r2, #16
 800120a:	4013      	ands	r3, r2
 800120c:	d063      	beq.n	80012d6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d12a      	bne.n	800126c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001216:	4b95      	ldr	r3, [pc, #596]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800121a:	4b94      	ldr	r3, [pc, #592]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800121c:	2104      	movs	r1, #4
 800121e:	430a      	orrs	r2, r1
 8001220:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001222:	4b92      	ldr	r3, [pc, #584]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001226:	4b91      	ldr	r3, [pc, #580]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001228:	2101      	movs	r1, #1
 800122a:	430a      	orrs	r2, r1
 800122c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122e:	f7ff fb47 	bl	80008c0 <HAL_GetTick>
 8001232:	0003      	movs	r3, r0
 8001234:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001238:	f7ff fb42 	bl	80008c0 <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e152      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800124a:	4b88      	ldr	r3, [pc, #544]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800124c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124e:	2202      	movs	r2, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d0f1      	beq.n	8001238 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001254:	4b85      	ldr	r3, [pc, #532]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	22f8      	movs	r2, #248	; 0xf8
 800125a:	4393      	bics	r3, r2
 800125c:	0019      	movs	r1, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	00da      	lsls	r2, r3, #3
 8001264:	4b81      	ldr	r3, [pc, #516]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001266:	430a      	orrs	r2, r1
 8001268:	635a      	str	r2, [r3, #52]	; 0x34
 800126a:	e034      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	3305      	adds	r3, #5
 8001272:	d111      	bne.n	8001298 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001274:	4b7d      	ldr	r3, [pc, #500]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001278:	4b7c      	ldr	r3, [pc, #496]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800127a:	2104      	movs	r1, #4
 800127c:	438a      	bics	r2, r1
 800127e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001280:	4b7a      	ldr	r3, [pc, #488]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001284:	22f8      	movs	r2, #248	; 0xf8
 8001286:	4393      	bics	r3, r2
 8001288:	0019      	movs	r1, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	00da      	lsls	r2, r3, #3
 8001290:	4b76      	ldr	r3, [pc, #472]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	; 0x34
 8001296:	e01e      	b.n	80012d6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001298:	4b74      	ldr	r3, [pc, #464]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800129a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800129c:	4b73      	ldr	r3, [pc, #460]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800129e:	2104      	movs	r1, #4
 80012a0:	430a      	orrs	r2, r1
 80012a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012a4:	4b71      	ldr	r3, [pc, #452]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80012a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a8:	4b70      	ldr	r3, [pc, #448]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80012aa:	2101      	movs	r1, #1
 80012ac:	438a      	bics	r2, r1
 80012ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fb06 	bl	80008c0 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012b8:	e008      	b.n	80012cc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012ba:	f7ff fb01 	bl	80008c0 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d901      	bls.n	80012cc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e111      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80012cc:	4b67      	ldr	r3, [pc, #412]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80012ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d0:	2202      	movs	r2, #2
 80012d2:	4013      	ands	r3, r2
 80012d4:	d1f1      	bne.n	80012ba <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2220      	movs	r2, #32
 80012dc:	4013      	ands	r3, r2
 80012de:	d05c      	beq.n	800139a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	220c      	movs	r2, #12
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b0c      	cmp	r3, #12
 80012ea:	d00e      	beq.n	800130a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012ec:	4b5f      	ldr	r3, [pc, #380]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	220c      	movs	r2, #12
 80012f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d114      	bne.n	8001322 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80012f8:	4b5c      	ldr	r3, [pc, #368]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	23c0      	movs	r3, #192	; 0xc0
 80012fe:	025b      	lsls	r3, r3, #9
 8001300:	401a      	ands	r2, r3
 8001302:	23c0      	movs	r3, #192	; 0xc0
 8001304:	025b      	lsls	r3, r3, #9
 8001306:	429a      	cmp	r2, r3
 8001308:	d10b      	bne.n	8001322 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800130a:	4b58      	ldr	r3, [pc, #352]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800130c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	025b      	lsls	r3, r3, #9
 8001312:	4013      	ands	r3, r2
 8001314:	d040      	beq.n	8001398 <HAL_RCC_OscConfig+0x5a8>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6a1b      	ldr	r3, [r3, #32]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d03c      	beq.n	8001398 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e0e6      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01b      	beq.n	8001362 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800132a:	4b50      	ldr	r3, [pc, #320]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800132c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800132e:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001330:	2180      	movs	r1, #128	; 0x80
 8001332:	0249      	lsls	r1, r1, #9
 8001334:	430a      	orrs	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fac2 	bl	80008c0 <HAL_GetTick>
 800133c:	0003      	movs	r3, r0
 800133e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001342:	f7ff fabd 	bl	80008c0 <HAL_GetTick>
 8001346:	0002      	movs	r2, r0
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e0cd      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	4013      	ands	r3, r2
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x552>
 8001360:	e01b      	b.n	800139a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001366:	4b41      	ldr	r3, [pc, #260]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001368:	4943      	ldr	r1, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x688>)
 800136a:	400a      	ands	r2, r1
 800136c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff faa7 	bl	80008c0 <HAL_GetTick>
 8001372:	0003      	movs	r3, r0
 8001374:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001378:	f7ff faa2 	bl	80008c0 <HAL_GetTick>
 800137c:	0002      	movs	r2, r0
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e0b2      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800138c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138e:	2380      	movs	r3, #128	; 0x80
 8001390:	025b      	lsls	r3, r3, #9
 8001392:	4013      	ands	r3, r2
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x588>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001398:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d100      	bne.n	80013a4 <HAL_RCC_OscConfig+0x5b4>
 80013a2:	e0a4      	b.n	80014ee <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	220c      	movs	r2, #12
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b08      	cmp	r3, #8
 80013ae:	d100      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5c2>
 80013b0:	e078      	b.n	80014a4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d14c      	bne.n	8001454 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80013c0:	492e      	ldr	r1, [pc, #184]	; (800147c <HAL_RCC_OscConfig+0x68c>)
 80013c2:	400a      	ands	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fa7b 	bl	80008c0 <HAL_GetTick>
 80013ca:	0003      	movs	r3, r0
 80013cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d0:	f7ff fa76 	bl	80008c0 <HAL_GetTick>
 80013d4:	0002      	movs	r2, r0
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e086      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	049b      	lsls	r3, r3, #18
 80013ea:	4013      	ands	r3, r2
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	220f      	movs	r2, #15
 80013f4:	4393      	bics	r3, r2
 80013f6:	0019      	movs	r1, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013fc:	4b1b      	ldr	r3, [pc, #108]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 80013fe:	430a      	orrs	r2, r1
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_RCC_OscConfig+0x690>)
 8001408:	4013      	ands	r3, r2
 800140a:	0019      	movs	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	431a      	orrs	r2, r3
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800141c:	4b13      	ldr	r3, [pc, #76]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001422:	2180      	movs	r1, #128	; 0x80
 8001424:	0449      	lsls	r1, r1, #17
 8001426:	430a      	orrs	r2, r1
 8001428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff fa49 	bl	80008c0 <HAL_GetTick>
 800142e:	0003      	movs	r3, r0
 8001430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fa44 	bl	80008c0 <HAL_GetTick>
 8001438:	0002      	movs	r2, r0
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e054      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	049b      	lsls	r3, r3, #18
 800144e:	4013      	ands	r3, r2
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x644>
 8001452:	e04c      	b.n	80014ee <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_RCC_OscConfig+0x67c>)
 800145a:	4908      	ldr	r1, [pc, #32]	; (800147c <HAL_RCC_OscConfig+0x68c>)
 800145c:	400a      	ands	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fa2e 	bl	80008c0 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	e015      	b.n	8001496 <HAL_RCC_OscConfig+0x6a6>
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	40021000 	.word	0x40021000
 8001470:	00001388 	.word	0x00001388
 8001474:	efffffff 	.word	0xefffffff
 8001478:	fffeffff 	.word	0xfffeffff
 800147c:	feffffff 	.word	0xfeffffff
 8001480:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fa1c 	bl	80008c0 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e02c      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_RCC_OscConfig+0x708>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	049b      	lsls	r3, r3, #18
 800149e:	4013      	ands	r3, r2
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x694>
 80014a2:	e024      	b.n	80014ee <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e01f      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_RCC_OscConfig+0x708>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <HAL_RCC_OscConfig+0x708>)
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	23c0      	movs	r3, #192	; 0xc0
 80014c0:	025b      	lsls	r3, r3, #9
 80014c2:	401a      	ands	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	220f      	movs	r2, #15
 80014d0:	401a      	ands	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	23f0      	movs	r3, #240	; 0xf0
 80014de:	039b      	lsls	r3, r3, #14
 80014e0:	401a      	ands	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b008      	add	sp, #32
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0bf      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001510:	4b61      	ldr	r3, [pc, #388]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	4013      	ands	r3, r2
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d911      	bls.n	8001542 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b5e      	ldr	r3, [pc, #376]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4393      	bics	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001530:	4b59      	ldr	r3, [pc, #356]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	683a      	ldr	r2, [r7, #0]
 800153a:	429a      	cmp	r2, r3
 800153c:	d001      	beq.n	8001542 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0a6      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2202      	movs	r2, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d015      	beq.n	8001578 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2204      	movs	r2, #4
 8001552:	4013      	ands	r3, r2
 8001554:	d006      	beq.n	8001564 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001556:	4b51      	ldr	r3, [pc, #324]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 800155c:	21e0      	movs	r1, #224	; 0xe0
 800155e:	00c9      	lsls	r1, r1, #3
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001564:	4b4d      	ldr	r3, [pc, #308]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	22f0      	movs	r2, #240	; 0xf0
 800156a:	4393      	bics	r3, r2
 800156c:	0019      	movs	r1, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	4b4a      	ldr	r3, [pc, #296]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 8001574:	430a      	orrs	r2, r1
 8001576:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	4013      	ands	r3, r2
 8001580:	d04c      	beq.n	800161c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d107      	bne.n	800159a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158a:	4b44      	ldr	r3, [pc, #272]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	029b      	lsls	r3, r3, #10
 8001592:	4013      	ands	r3, r2
 8001594:	d120      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e07a      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d107      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a2:	4b3e      	ldr	r3, [pc, #248]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	049b      	lsls	r3, r3, #18
 80015aa:	4013      	ands	r3, r2
 80015ac:	d114      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e06e      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015ba:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	025b      	lsls	r3, r3, #9
 80015c2:	4013      	ands	r3, r2
 80015c4:	d108      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e062      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2202      	movs	r2, #2
 80015d0:	4013      	ands	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e05b      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d8:	4b30      	ldr	r3, [pc, #192]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2203      	movs	r2, #3
 80015de:	4393      	bics	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 80015e8:	430a      	orrs	r2, r1
 80015ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ec:	f7ff f968 	bl	80008c0 <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f4:	e009      	b.n	800160a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f6:	f7ff f963 	bl	80008c0 <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	4a27      	ldr	r2, [pc, #156]	; (80016a0 <HAL_RCC_ClockConfig+0x1a4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e042      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	220c      	movs	r2, #12
 8001610:	401a      	ands	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d1ec      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	4013      	ands	r3, r2
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d211      	bcs.n	800164e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b1b      	ldr	r3, [pc, #108]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	4393      	bics	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163c:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_RCC_ClockConfig+0x19c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	4013      	ands	r3, r2
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e020      	b.n	8001690 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2204      	movs	r2, #4
 8001654:	4013      	ands	r3, r2
 8001656:	d009      	beq.n	800166c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	4a11      	ldr	r2, [pc, #68]	; (80016a4 <HAL_RCC_ClockConfig+0x1a8>)
 800165e:	4013      	ands	r3, r2
 8001660:	0019      	movs	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 8001668:	430a      	orrs	r2, r1
 800166a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800166c:	f000 f820 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8001670:	0001      	movs	r1, r0
 8001672:	4b0a      	ldr	r3, [pc, #40]	; (800169c <HAL_RCC_ClockConfig+0x1a0>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	091b      	lsrs	r3, r3, #4
 8001678:	220f      	movs	r2, #15
 800167a:	4013      	ands	r3, r2
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_RCC_ClockConfig+0x1ac>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	000a      	movs	r2, r1
 8001682:	40da      	lsrs	r2, r3
 8001684:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_RCC_ClockConfig+0x1b0>)
 8001686:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff f8d3 	bl	8000834 <HAL_InitTick>
  
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	0018      	movs	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	b004      	add	sp, #16
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40022000 	.word	0x40022000
 800169c:	40021000 	.word	0x40021000
 80016a0:	00001388 	.word	0x00001388
 80016a4:	fffff8ff 	.word	0xfffff8ff
 80016a8:	08002940 	.word	0x08002940
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b08f      	sub	sp, #60	; 0x3c
 80016b4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80016b6:	2314      	movs	r3, #20
 80016b8:	18fb      	adds	r3, r7, r3
 80016ba:	4a37      	ldr	r2, [pc, #220]	; (8001798 <HAL_RCC_GetSysClockFreq+0xe8>)
 80016bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016be:	c313      	stmia	r3!, {r0, r1, r4}
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4a35      	ldr	r2, [pc, #212]	; (800179c <HAL_RCC_GetSysClockFreq+0xec>)
 80016c8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016ca:	c313      	stmia	r3!, {r0, r1, r4}
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80016e4:	4b2e      	ldr	r3, [pc, #184]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ec:	220c      	movs	r2, #12
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d006      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x52>
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	d043      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0xd0>
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	d144      	bne.n	8001786 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016fc:	4b29      	ldr	r3, [pc, #164]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001700:	e044      	b.n	800178c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	220f      	movs	r2, #15
 8001708:	4013      	ands	r3, r2
 800170a:	2214      	movs	r2, #20
 800170c:	18ba      	adds	r2, r7, r2
 800170e:	5cd3      	ldrb	r3, [r2, r3]
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001712:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	220f      	movs	r2, #15
 8001718:	4013      	ands	r3, r2
 800171a:	1d3a      	adds	r2, r7, #4
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001722:	23c0      	movs	r3, #192	; 0xc0
 8001724:	025b      	lsls	r3, r3, #9
 8001726:	401a      	ands	r2, r3
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	025b      	lsls	r3, r3, #9
 800172c:	429a      	cmp	r2, r3
 800172e:	d109      	bne.n	8001744 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001732:	481c      	ldr	r0, [pc, #112]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001734:	f7fe fce8 	bl	8000108 <__udivsi3>
 8001738:	0003      	movs	r3, r0
 800173a:	001a      	movs	r2, r3
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	4353      	muls	r3, r2
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
 8001742:	e01a      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001744:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001746:	23c0      	movs	r3, #192	; 0xc0
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	401a      	ands	r2, r3
 800174c:	23c0      	movs	r3, #192	; 0xc0
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	429a      	cmp	r2, r3
 8001752:	d109      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001756:	4814      	ldr	r0, [pc, #80]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001758:	f7fe fcd6 	bl	8000108 <__udivsi3>
 800175c:	0003      	movs	r3, r0
 800175e:	001a      	movs	r2, r3
 8001760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001762:	4353      	muls	r3, r2
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
 8001766:	e008      	b.n	800177a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176a:	480e      	ldr	r0, [pc, #56]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 800176c:	f7fe fccc 	bl	8000108 <__udivsi3>
 8001770:	0003      	movs	r3, r0
 8001772:	001a      	movs	r2, r3
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	4353      	muls	r3, r2
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800177a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800177c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800177e:	e005      	b.n	800178c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001780:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001782:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001784:	e002      	b.n	800178c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001788:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800178a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800178c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800178e:	0018      	movs	r0, r3
 8001790:	46bd      	mov	sp, r7
 8001792:	b00f      	add	sp, #60	; 0x3c
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	08002920 	.word	0x08002920
 800179c:	08002930 	.word	0x08002930
 80017a0:	40021000 	.word	0x40021000
 80017a4:	007a1200 	.word	0x007a1200
 80017a8:	02dc6c00 	.word	0x02dc6c00

080017ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <HAL_RCC_GetHCLKFreq+0x10>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80017c4:	f7ff fff2 	bl	80017ac <HAL_RCC_GetHCLKFreq>
 80017c8:	0001      	movs	r1, r0
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0a1b      	lsrs	r3, r3, #8
 80017d0:	2207      	movs	r2, #7
 80017d2:	4013      	ands	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	40d9      	lsrs	r1, r3
 80017da:	000b      	movs	r3, r1
}    
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000
 80017e8:	08002950 	.word	0x08002950

080017ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	025b      	lsls	r3, r3, #9
 8001804:	4013      	ands	r3, r2
 8001806:	d100      	bne.n	800180a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001808:	e08f      	b.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800180a:	2317      	movs	r3, #23
 800180c:	18fb      	adds	r3, r7, r3
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	055b      	lsls	r3, r3, #21
 800181a:	4013      	ands	r3, r2
 800181c:	d111      	bne.n	8001842 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	4b6b      	ldr	r3, [pc, #428]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183a:	2317      	movs	r3, #23
 800183c:	18fb      	adds	r3, r7, r3
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001842:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4013      	ands	r3, r2
 800184c:	d11a      	bne.n	8001884 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184e:	4b61      	ldr	r3, [pc, #388]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b60      	ldr	r3, [pc, #384]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0049      	lsls	r1, r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185c:	f7ff f830 	bl	80008c0 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff f82b 	bl	80008c0 <HAL_GetTick>
 800186a:	0002      	movs	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	; 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0a6      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4013      	ands	r3, r2
 8001882:	d0f0      	beq.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001884:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	23c0      	movs	r3, #192	; 0xc0
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d034      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d02c      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018a8:	6a1b      	ldr	r3, [r3, #32]
 80018aa:	4a4b      	ldr	r2, [pc, #300]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80018b0:	4b47      	ldr	r3, [pc, #284]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018b6:	2180      	movs	r1, #128	; 0x80
 80018b8:	0249      	lsls	r1, r1, #9
 80018ba:	430a      	orrs	r2, r1
 80018bc:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80018be:	4b44      	ldr	r3, [pc, #272]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018c0:	6a1a      	ldr	r2, [r3, #32]
 80018c2:	4b43      	ldr	r3, [pc, #268]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018c4:	4945      	ldr	r1, [pc, #276]	; (80019dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80018c6:	400a      	ands	r2, r1
 80018c8:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80018ca:	4b41      	ldr	r3, [pc, #260]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	4013      	ands	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7fe fff2 	bl	80008c0 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e0:	e009      	b.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e2:	f7fe ffed 	bl	80008c0 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e067      	b.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	2202      	movs	r2, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001906:	4013      	ands	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001910:	430a      	orrs	r2, r1
 8001912:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001914:	2317      	movs	r3, #23
 8001916:	18fb      	adds	r3, r7, r3
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d105      	bne.n	800192a <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001920:	69da      	ldr	r2, [r3, #28]
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001924:	492f      	ldr	r1, [pc, #188]	; (80019e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001926:	400a      	ands	r2, r1
 8001928:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4013      	ands	r3, r2
 8001932:	d009      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	2203      	movs	r2, #3
 800193a:	4393      	bics	r3, r2
 800193c:	0019      	movs	r1, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001944:	430a      	orrs	r2, r1
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d009      	beq.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001958:	4013      	ands	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001962:	430a      	orrs	r2, r1
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2220      	movs	r2, #32
 800196c:	4013      	ands	r3, r2
 800196e:	d009      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001974:	2210      	movs	r2, #16
 8001976:	4393      	bics	r3, r2
 8001978:	0019      	movs	r1, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691a      	ldr	r2, [r3, #16]
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001980:	430a      	orrs	r2, r1
 8001982:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	029b      	lsls	r3, r3, #10
 800198c:	4013      	ands	r3, r2
 800198e:	d009      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	4393      	bics	r3, r2
 8001998:	0019      	movs	r1, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019a0:	430a      	orrs	r2, r1
 80019a2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2380      	movs	r3, #128	; 0x80
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	4013      	ands	r3, r2
 80019ae:	d009      	beq.n	80019c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	4393      	bics	r3, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	0018      	movs	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b006      	add	sp, #24
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40007000 	.word	0x40007000
 80019d8:	fffffcff 	.word	0xfffffcff
 80019dc:	fffeffff 	.word	0xfffeffff
 80019e0:	00001388 	.word	0x00001388
 80019e4:	efffffff 	.word	0xefffffff
 80019e8:	fffcffff 	.word	0xfffcffff

080019ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e01e      	b.n	8001a3c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	223d      	movs	r2, #61	; 0x3d
 8001a02:	5c9b      	ldrb	r3, [r3, r2]
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d107      	bne.n	8001a1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	223c      	movs	r2, #60	; 0x3c
 8001a0e:	2100      	movs	r1, #0
 8001a10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	0018      	movs	r0, r3
 8001a16:	f7fe fe33 	bl	8000680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	223d      	movs	r2, #61	; 0x3d
 8001a1e:	2102      	movs	r1, #2
 8001a20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	0010      	movs	r0, r2
 8001a2e:	f000 fa1f 	bl	8001e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	223d      	movs	r2, #61	; 0x3d
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	2207      	movs	r2, #7
 8001a64:	4013      	ands	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d007      	beq.n	8001a7e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d124      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d11d      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	4252      	negs	r2, r2
 8001ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d004      	beq.n	8001ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 f9b8 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 8001ad0:	e007      	b.n	8001ae2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f000 f9ab 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	0018      	movs	r0, r3
 8001ade:	f000 f9b7 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2204      	movs	r2, #4
 8001af0:	4013      	ands	r3, r2
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d125      	bne.n	8001b42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2204      	movs	r2, #4
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d11e      	bne.n	8001b42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2205      	movs	r2, #5
 8001b0a:	4252      	negs	r2, r2
 8001b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2202      	movs	r2, #2
 8001b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d004      	beq.n	8001b2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f98b 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 8001b2a:	e007      	b.n	8001b3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f000 f97e 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 f98a 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d124      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2208      	movs	r2, #8
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d11d      	bne.n	8001b9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2209      	movs	r2, #9
 8001b64:	4252      	negs	r2, r2
 8001b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2203      	movs	r2, #3
 8001b76:	4013      	ands	r3, r2
 8001b78:	d004      	beq.n	8001b84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f000 f95f 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 8001b82:	e007      	b.n	8001b94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f952 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f000 f95e 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b10      	cmp	r3, #16
 8001ba6:	d125      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2210      	movs	r2, #16
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d11e      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2211      	movs	r2, #17
 8001bbc:	4252      	negs	r2, r2
 8001bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2208      	movs	r2, #8
 8001bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	23c0      	movs	r3, #192	; 0xc0
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d004      	beq.n	8001bde <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 f932 	bl	8001e40 <HAL_TIM_IC_CaptureCallback>
 8001bdc:	e007      	b.n	8001bee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 f925 	bl	8001e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f000 f931 	bl	8001e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10f      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d108      	bne.n	8001c22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2202      	movs	r2, #2
 8001c16:	4252      	negs	r2, r2
 8001c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	f7fe fcc5 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b80      	cmp	r3, #128	; 0x80
 8001c2e:	d10f      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b80      	cmp	r3, #128	; 0x80
 8001c3c:	d108      	bne.n	8001c50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2281      	movs	r2, #129	; 0x81
 8001c44:	4252      	negs	r2, r2
 8001c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f000 fa90 	bl	8002170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b40      	cmp	r3, #64	; 0x40
 8001c5c:	d10f      	bne.n	8001c7e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	4013      	ands	r3, r2
 8001c68:	2b40      	cmp	r3, #64	; 0x40
 8001c6a:	d108      	bne.n	8001c7e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2241      	movs	r2, #65	; 0x41
 8001c72:	4252      	negs	r2, r2
 8001c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 f8f1 	bl	8001e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2220      	movs	r2, #32
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b20      	cmp	r3, #32
 8001c8a:	d10f      	bne.n	8001cac <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d108      	bne.n	8001cac <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2221      	movs	r2, #33	; 0x21
 8001ca0:	4252      	negs	r2, r2
 8001ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f000 fa5a 	bl	8002160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b002      	add	sp, #8
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	223c      	movs	r2, #60	; 0x3c
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_TIM_ConfigClockSource+0x18>
 8001cc8:	2302      	movs	r3, #2
 8001cca:	e0ab      	b.n	8001e24 <HAL_TIM_ConfigClockSource+0x170>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223c      	movs	r2, #60	; 0x3c
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	223d      	movs	r2, #61	; 0x3d
 8001cd8:	2102      	movs	r1, #2
 8001cda:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2277      	movs	r2, #119	; 0x77
 8001ce8:	4393      	bics	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a4f      	ldr	r2, [pc, #316]	; (8001e2c <HAL_TIM_ConfigClockSource+0x178>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b40      	cmp	r3, #64	; 0x40
 8001d02:	d100      	bne.n	8001d06 <HAL_TIM_ConfigClockSource+0x52>
 8001d04:	e06b      	b.n	8001dde <HAL_TIM_ConfigClockSource+0x12a>
 8001d06:	d80e      	bhi.n	8001d26 <HAL_TIM_ConfigClockSource+0x72>
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d100      	bne.n	8001d0e <HAL_TIM_ConfigClockSource+0x5a>
 8001d0c:	e077      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x14a>
 8001d0e:	d803      	bhi.n	8001d18 <HAL_TIM_ConfigClockSource+0x64>
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d100      	bne.n	8001d16 <HAL_TIM_ConfigClockSource+0x62>
 8001d14:	e073      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001d16:	e07c      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	d100      	bne.n	8001d1e <HAL_TIM_ConfigClockSource+0x6a>
 8001d1c:	e06f      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x14a>
 8001d1e:	2b30      	cmp	r3, #48	; 0x30
 8001d20:	d100      	bne.n	8001d24 <HAL_TIM_ConfigClockSource+0x70>
 8001d22:	e06c      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8001d24:	e075      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d26:	2b70      	cmp	r3, #112	; 0x70
 8001d28:	d00e      	beq.n	8001d48 <HAL_TIM_ConfigClockSource+0x94>
 8001d2a:	d804      	bhi.n	8001d36 <HAL_TIM_ConfigClockSource+0x82>
 8001d2c:	2b50      	cmp	r3, #80	; 0x50
 8001d2e:	d036      	beq.n	8001d9e <HAL_TIM_ConfigClockSource+0xea>
 8001d30:	2b60      	cmp	r3, #96	; 0x60
 8001d32:	d044      	beq.n	8001dbe <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8001d34:	e06d      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8001d36:	2280      	movs	r2, #128	; 0x80
 8001d38:	0152      	lsls	r2, r2, #5
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d068      	beq.n	8001e10 <HAL_TIM_ConfigClockSource+0x15c>
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0192      	lsls	r2, r2, #6
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d017      	beq.n	8001d76 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8001d46:	e064      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	6899      	ldr	r1, [r3, #8]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f000 f984 	bl	8002064 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2277      	movs	r2, #119	; 0x77
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	609a      	str	r2, [r3, #8]
      break;
 8001d74:	e04d      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6899      	ldr	r1, [r3, #8]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	f000 f96d 	bl	8002064 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	01c9      	lsls	r1, r1, #7
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	609a      	str	r2, [r3, #8]
      break;
 8001d9c:	e039      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	001a      	movs	r2, r3
 8001dac:	f000 f8e0 	bl	8001f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2150      	movs	r1, #80	; 0x50
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 f93a 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001dbc:	e029      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6859      	ldr	r1, [r3, #4]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	001a      	movs	r2, r3
 8001dcc:	f000 f8fe 	bl	8001fcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2160      	movs	r1, #96	; 0x60
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	f000 f92a 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001ddc:	e019      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	6859      	ldr	r1, [r3, #4]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	001a      	movs	r2, r3
 8001dec:	f000 f8c0 	bl	8001f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2140      	movs	r1, #64	; 0x40
 8001df6:	0018      	movs	r0, r3
 8001df8:	f000 f91a 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001dfc:	e009      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	0019      	movs	r1, r3
 8001e08:	0010      	movs	r0, r2
 8001e0a:	f000 f911 	bl	8002030 <TIM_ITRx_SetConfig>
      break;
 8001e0e:	e000      	b.n	8001e12 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8001e10:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	223d      	movs	r2, #61	; 0x3d
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	223c      	movs	r2, #60	; 0x3c
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	ffff00ff 	.word	0xffff00ff

08001e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a34      	ldr	r2, [pc, #208]	; (8001f54 <TIM_Base_SetConfig+0xe4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d008      	beq.n	8001e9a <TIM_Base_SetConfig+0x2a>
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	05db      	lsls	r3, r3, #23
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d003      	beq.n	8001e9a <TIM_Base_SetConfig+0x2a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a30      	ldr	r2, [pc, #192]	; (8001f58 <TIM_Base_SetConfig+0xe8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d108      	bne.n	8001eac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2270      	movs	r2, #112	; 0x70
 8001e9e:	4393      	bics	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a29      	ldr	r2, [pc, #164]	; (8001f54 <TIM_Base_SetConfig+0xe4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d018      	beq.n	8001ee6 <TIM_Base_SetConfig+0x76>
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d013      	beq.n	8001ee6 <TIM_Base_SetConfig+0x76>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	; (8001f58 <TIM_Base_SetConfig+0xe8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00f      	beq.n	8001ee6 <TIM_Base_SetConfig+0x76>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <TIM_Base_SetConfig+0xec>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00b      	beq.n	8001ee6 <TIM_Base_SetConfig+0x76>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a23      	ldr	r2, [pc, #140]	; (8001f60 <TIM_Base_SetConfig+0xf0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <TIM_Base_SetConfig+0x76>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <TIM_Base_SetConfig+0xf4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d003      	beq.n	8001ee6 <TIM_Base_SetConfig+0x76>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <TIM_Base_SetConfig+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <TIM_Base_SetConfig+0xfc>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	4393      	bics	r3, r2
 8001efe:	001a      	movs	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <TIM_Base_SetConfig+0xe4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00b      	beq.n	8001f3e <TIM_Base_SetConfig+0xce>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <TIM_Base_SetConfig+0xf0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <TIM_Base_SetConfig+0xce>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <TIM_Base_SetConfig+0xf4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d003      	beq.n	8001f3e <TIM_Base_SetConfig+0xce>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <TIM_Base_SetConfig+0xf8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d103      	bne.n	8001f46 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	615a      	str	r2, [r3, #20]
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b004      	add	sp, #16
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40012c00 	.word	0x40012c00
 8001f58:	40000400 	.word	0x40000400
 8001f5c:	40002000 	.word	0x40002000
 8001f60:	40014000 	.word	0x40014000
 8001f64:	40014400 	.word	0x40014400
 8001f68:	40014800 	.word	0x40014800
 8001f6c:	fffffcff 	.word	0xfffffcff

08001f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	2201      	movs	r2, #1
 8001f88:	4393      	bics	r3, r2
 8001f8a:	001a      	movs	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	22f0      	movs	r2, #240	; 0xf0
 8001f9a:	4393      	bics	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	220a      	movs	r2, #10
 8001fac:	4393      	bics	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	621a      	str	r2, [r3, #32]
}
 8001fc4:	46c0      	nop			; (mov r8, r8)
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b006      	add	sp, #24
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	2210      	movs	r2, #16
 8001fde:	4393      	bics	r3, r2
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <TIM_TI2_ConfigInputStage+0x60>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	031b      	lsls	r3, r3, #12
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	22a0      	movs	r2, #160	; 0xa0
 8002008:	4393      	bics	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	621a      	str	r2, [r3, #32]
}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	46bd      	mov	sp, r7
 8002026:	b006      	add	sp, #24
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	ffff0fff 	.word	0xffff0fff

08002030 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2270      	movs	r2, #112	; 0x70
 8002044:	4393      	bics	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	2207      	movs	r2, #7
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	609a      	str	r2, [r3, #8]
}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
 8002070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <TIM_ETR_SetConfig+0x3c>)
 800207c:	4013      	ands	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	021a      	lsls	r2, r3, #8
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	431a      	orrs	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	4313      	orrs	r3, r2
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4313      	orrs	r3, r2
 8002090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	609a      	str	r2, [r3, #8]
}
 8002098:	46c0      	nop			; (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b006      	add	sp, #24
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	ffff00ff 	.word	0xffff00ff

080020a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	223c      	movs	r2, #60	; 0x3c
 80020b2:	5c9b      	ldrb	r3, [r3, r2]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e047      	b.n	800214c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	223c      	movs	r2, #60	; 0x3c
 80020c0:	2101      	movs	r1, #1
 80020c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	223d      	movs	r2, #61	; 0x3d
 80020c8:	2102      	movs	r1, #2
 80020ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2270      	movs	r2, #112	; 0x70
 80020e0:	4393      	bics	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68fa      	ldr	r2, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d00f      	beq.n	8002120 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	05db      	lsls	r3, r3, #23
 8002108:	429a      	cmp	r2, r3
 800210a:	d009      	beq.n	8002120 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d10c      	bne.n	800213a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2280      	movs	r2, #128	; 0x80
 8002124:	4393      	bics	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	4313      	orrs	r3, r2
 8002130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68ba      	ldr	r2, [r7, #8]
 8002138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	223d      	movs	r2, #61	; 0x3d
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	223c      	movs	r2, #60	; 0x3c
 8002146:	2100      	movs	r1, #0
 8002148:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40012c00 	.word	0x40012c00
 8002158:	40000400 	.word	0x40000400
 800215c:	40014000 	.word	0x40014000

08002160 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	b002      	add	sp, #8
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002178:	46c0      	nop			; (mov r8, r8)
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e044      	b.n	800221c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2270      	movs	r2, #112	; 0x70
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7fe fa8f 	bl	80006c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2224      	movs	r2, #36	; 0x24
 80021ae:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2101      	movs	r1, #1
 80021bc:	438a      	bics	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f830 	bl	8002228 <UART_SetConfig>
 80021c8:	0003      	movs	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d101      	bne.n	80021d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e024      	b.n	800221c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	0018      	movs	r0, r3
 80021de:	f000 f9ef 	bl	80025c0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	490d      	ldr	r1, [pc, #52]	; (8002224 <HAL_UART_Init+0xa4>)
 80021ee:	400a      	ands	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	212a      	movs	r1, #42	; 0x2a
 80021fe:	438a      	bics	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f000 fa87 	bl	8002728 <UART_CheckIdleState>
 800221a:	0003      	movs	r3, r0
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}
 8002224:	ffffb7ff 	.word	0xffffb7ff

08002228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002234:	2317      	movs	r3, #23
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	431a      	orrs	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4ac5      	ldr	r2, [pc, #788]	; (8002570 <UART_SetConfig+0x348>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4ac0      	ldr	r2, [pc, #768]	; (8002574 <UART_SetConfig+0x34c>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4ab7      	ldr	r2, [pc, #732]	; (8002578 <UART_SetConfig+0x350>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4ab3      	ldr	r2, [pc, #716]	; (800257c <UART_SetConfig+0x354>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d125      	bne.n	80022fe <UART_SetConfig+0xd6>
 80022b2:	4bb3      	ldr	r3, [pc, #716]	; (8002580 <UART_SetConfig+0x358>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	2203      	movs	r2, #3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d00f      	beq.n	80022de <UART_SetConfig+0xb6>
 80022be:	d304      	bcc.n	80022ca <UART_SetConfig+0xa2>
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d011      	beq.n	80022e8 <UART_SetConfig+0xc0>
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d005      	beq.n	80022d4 <UART_SetConfig+0xac>
 80022c8:	e013      	b.n	80022f2 <UART_SetConfig+0xca>
 80022ca:	231f      	movs	r3, #31
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e064      	b.n	800239e <UART_SetConfig+0x176>
 80022d4:	231f      	movs	r3, #31
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e05f      	b.n	800239e <UART_SetConfig+0x176>
 80022de:	231f      	movs	r3, #31
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	2204      	movs	r2, #4
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e05a      	b.n	800239e <UART_SetConfig+0x176>
 80022e8:	231f      	movs	r3, #31
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2208      	movs	r2, #8
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e055      	b.n	800239e <UART_SetConfig+0x176>
 80022f2:	231f      	movs	r3, #31
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2210      	movs	r2, #16
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	e04f      	b.n	800239e <UART_SetConfig+0x176>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4aa0      	ldr	r2, [pc, #640]	; (8002584 <UART_SetConfig+0x35c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d132      	bne.n	800236e <UART_SetConfig+0x146>
 8002308:	4b9d      	ldr	r3, [pc, #628]	; (8002580 <UART_SetConfig+0x358>)
 800230a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800230c:	23c0      	movs	r3, #192	; 0xc0
 800230e:	029b      	lsls	r3, r3, #10
 8002310:	4013      	ands	r3, r2
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	0252      	lsls	r2, r2, #9
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <UART_SetConfig+0x126>
 800231a:	2280      	movs	r2, #128	; 0x80
 800231c:	0252      	lsls	r2, r2, #9
 800231e:	4293      	cmp	r3, r2
 8002320:	d802      	bhi.n	8002328 <UART_SetConfig+0x100>
 8002322:	2b00      	cmp	r3, #0
 8002324:	d009      	beq.n	800233a <UART_SetConfig+0x112>
 8002326:	e01c      	b.n	8002362 <UART_SetConfig+0x13a>
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	0292      	lsls	r2, r2, #10
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <UART_SetConfig+0x130>
 8002330:	22c0      	movs	r2, #192	; 0xc0
 8002332:	0292      	lsls	r2, r2, #10
 8002334:	4293      	cmp	r3, r2
 8002336:	d005      	beq.n	8002344 <UART_SetConfig+0x11c>
 8002338:	e013      	b.n	8002362 <UART_SetConfig+0x13a>
 800233a:	231f      	movs	r3, #31
 800233c:	18fb      	adds	r3, r7, r3
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e02c      	b.n	800239e <UART_SetConfig+0x176>
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2202      	movs	r2, #2
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	e027      	b.n	800239e <UART_SetConfig+0x176>
 800234e:	231f      	movs	r3, #31
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	2204      	movs	r2, #4
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	e022      	b.n	800239e <UART_SetConfig+0x176>
 8002358:	231f      	movs	r3, #31
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	2208      	movs	r2, #8
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e01d      	b.n	800239e <UART_SetConfig+0x176>
 8002362:	231f      	movs	r3, #31
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2210      	movs	r2, #16
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	e017      	b.n	800239e <UART_SetConfig+0x176>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a85      	ldr	r2, [pc, #532]	; (8002588 <UART_SetConfig+0x360>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d104      	bne.n	8002382 <UART_SetConfig+0x15a>
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2200      	movs	r2, #0
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e00d      	b.n	800239e <UART_SetConfig+0x176>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a81      	ldr	r2, [pc, #516]	; (800258c <UART_SetConfig+0x364>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d104      	bne.n	8002396 <UART_SetConfig+0x16e>
 800238c:	231f      	movs	r3, #31
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	e003      	b.n	800239e <UART_SetConfig+0x176>
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	2210      	movs	r2, #16
 800239c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69da      	ldr	r2, [r3, #28]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d000      	beq.n	80023ac <UART_SetConfig+0x184>
 80023aa:	e07d      	b.n	80024a8 <UART_SetConfig+0x280>
  {
    switch (clocksource)
 80023ac:	231f      	movs	r3, #31
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d01c      	beq.n	80023f0 <UART_SetConfig+0x1c8>
 80023b6:	dc02      	bgt.n	80023be <UART_SetConfig+0x196>
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <UART_SetConfig+0x1a0>
 80023bc:	e04b      	b.n	8002456 <UART_SetConfig+0x22e>
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d025      	beq.n	800240e <UART_SetConfig+0x1e6>
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d037      	beq.n	8002436 <UART_SetConfig+0x20e>
 80023c6:	e046      	b.n	8002456 <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80023c8:	f7ff f9fa 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 80023cc:	0003      	movs	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	005a      	lsls	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	18d2      	adds	r2, r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	0019      	movs	r1, r3
 80023e2:	0010      	movs	r0, r2
 80023e4:	f7fd fe90 	bl	8000108 <__udivsi3>
 80023e8:	0003      	movs	r3, r0
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	61bb      	str	r3, [r7, #24]
        break;
 80023ee:	e037      	b.n	8002460 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	085b      	lsrs	r3, r3, #1
 80023f6:	4a66      	ldr	r2, [pc, #408]	; (8002590 <UART_SetConfig+0x368>)
 80023f8:	189a      	adds	r2, r3, r2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	0019      	movs	r1, r3
 8002400:	0010      	movs	r0, r2
 8002402:	f7fd fe81 	bl	8000108 <__udivsi3>
 8002406:	0003      	movs	r3, r0
 8002408:	b29b      	uxth	r3, r3
 800240a:	61bb      	str	r3, [r7, #24]
        break;
 800240c:	e028      	b.n	8002460 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800240e:	f7ff f94f 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 8002412:	0003      	movs	r3, r0
 8002414:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	005a      	lsls	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	18d2      	adds	r2, r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	0019      	movs	r1, r3
 8002428:	0010      	movs	r0, r2
 800242a:	f7fd fe6d 	bl	8000108 <__udivsi3>
 800242e:	0003      	movs	r3, r0
 8002430:	b29b      	uxth	r3, r3
 8002432:	61bb      	str	r3, [r7, #24]
        break;
 8002434:	e014      	b.n	8002460 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	0252      	lsls	r2, r2, #9
 8002440:	189a      	adds	r2, r3, r2
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	0019      	movs	r1, r3
 8002448:	0010      	movs	r0, r2
 800244a:	f7fd fe5d 	bl	8000108 <__udivsi3>
 800244e:	0003      	movs	r3, r0
 8002450:	b29b      	uxth	r3, r3
 8002452:	61bb      	str	r3, [r7, #24]
        break;
 8002454:	e004      	b.n	8002460 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8002456:	2317      	movs	r3, #23
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	2201      	movs	r2, #1
 800245c:	701a      	strb	r2, [r3, #0]
        break;
 800245e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2b0f      	cmp	r3, #15
 8002464:	d91b      	bls.n	800249e <UART_SetConfig+0x276>
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	4a4a      	ldr	r2, [pc, #296]	; (8002594 <UART_SetConfig+0x36c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d817      	bhi.n	800249e <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	b29a      	uxth	r2, r3
 8002472:	200a      	movs	r0, #10
 8002474:	183b      	adds	r3, r7, r0
 8002476:	210f      	movs	r1, #15
 8002478:	438a      	bics	r2, r1
 800247a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	b29b      	uxth	r3, r3
 8002482:	2207      	movs	r2, #7
 8002484:	4013      	ands	r3, r2
 8002486:	b299      	uxth	r1, r3
 8002488:	183b      	adds	r3, r7, r0
 800248a:	183a      	adds	r2, r7, r0
 800248c:	8812      	ldrh	r2, [r2, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	183a      	adds	r2, r7, r0
 8002498:	8812      	ldrh	r2, [r2, #0]
 800249a:	60da      	str	r2, [r3, #12]
 800249c:	e082      	b.n	80025a4 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 800249e:	2317      	movs	r3, #23
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
 80024a6:	e07d      	b.n	80025a4 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 80024a8:	231f      	movs	r3, #31
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d01b      	beq.n	80024ea <UART_SetConfig+0x2c2>
 80024b2:	dc02      	bgt.n	80024ba <UART_SetConfig+0x292>
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <UART_SetConfig+0x29c>
 80024b8:	e049      	b.n	800254e <UART_SetConfig+0x326>
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d024      	beq.n	8002508 <UART_SetConfig+0x2e0>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d035      	beq.n	800252e <UART_SetConfig+0x306>
 80024c2:	e044      	b.n	800254e <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024c4:	f7ff f97c 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 80024c8:	0003      	movs	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	085a      	lsrs	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	18d2      	adds	r2, r2, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	0019      	movs	r1, r3
 80024dc:	0010      	movs	r0, r2
 80024de:	f7fd fe13 	bl	8000108 <__udivsi3>
 80024e2:	0003      	movs	r3, r0
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	61bb      	str	r3, [r7, #24]
        break;
 80024e8:	e036      	b.n	8002558 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	4a29      	ldr	r2, [pc, #164]	; (8002598 <UART_SetConfig+0x370>)
 80024f2:	189a      	adds	r2, r3, r2
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	0019      	movs	r1, r3
 80024fa:	0010      	movs	r0, r2
 80024fc:	f7fd fe04 	bl	8000108 <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	b29b      	uxth	r3, r3
 8002504:	61bb      	str	r3, [r7, #24]
        break;
 8002506:	e027      	b.n	8002558 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002508:	f7ff f8d2 	bl	80016b0 <HAL_RCC_GetSysClockFreq>
 800250c:	0003      	movs	r3, r0
 800250e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	085a      	lsrs	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	18d2      	adds	r2, r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	0019      	movs	r1, r3
 8002520:	0010      	movs	r0, r2
 8002522:	f7fd fdf1 	bl	8000108 <__udivsi3>
 8002526:	0003      	movs	r3, r0
 8002528:	b29b      	uxth	r3, r3
 800252a:	61bb      	str	r3, [r7, #24]
        break;
 800252c:	e014      	b.n	8002558 <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	085b      	lsrs	r3, r3, #1
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	0212      	lsls	r2, r2, #8
 8002538:	189a      	adds	r2, r3, r2
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	0019      	movs	r1, r3
 8002540:	0010      	movs	r0, r2
 8002542:	f7fd fde1 	bl	8000108 <__udivsi3>
 8002546:	0003      	movs	r3, r0
 8002548:	b29b      	uxth	r3, r3
 800254a:	61bb      	str	r3, [r7, #24]
        break;
 800254c:	e004      	b.n	8002558 <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 800254e:	2317      	movs	r3, #23
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
        break;
 8002556:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	d91e      	bls.n	800259c <UART_SetConfig+0x374>
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <UART_SetConfig+0x36c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d81a      	bhi.n	800259c <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	e019      	b.n	80025a4 <UART_SetConfig+0x37c>
 8002570:	efff69f3 	.word	0xefff69f3
 8002574:	ffffcfff 	.word	0xffffcfff
 8002578:	fffff4ff 	.word	0xfffff4ff
 800257c:	40013800 	.word	0x40013800
 8002580:	40021000 	.word	0x40021000
 8002584:	40004400 	.word	0x40004400
 8002588:	40004800 	.word	0x40004800
 800258c:	40004c00 	.word	0x40004c00
 8002590:	00f42400 	.word	0x00f42400
 8002594:	0000ffff 	.word	0x0000ffff
 8002598:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 800259c:	2317      	movs	r3, #23
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2201      	movs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80025b0:	2317      	movs	r3, #23
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b008      	add	sp, #32
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)

080025c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2201      	movs	r2, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	d00b      	beq.n	80025ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4a4a      	ldr	r2, [pc, #296]	; (8002704 <UART_AdvFeatureConfig+0x144>)
 80025da:	4013      	ands	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d00b      	beq.n	800260c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	4a43      	ldr	r2, [pc, #268]	; (8002708 <UART_AdvFeatureConfig+0x148>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	0019      	movs	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2204      	movs	r2, #4
 8002612:	4013      	ands	r3, r2
 8002614:	d00b      	beq.n	800262e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4a3b      	ldr	r2, [pc, #236]	; (800270c <UART_AdvFeatureConfig+0x14c>)
 800261e:	4013      	ands	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	2208      	movs	r2, #8
 8002634:	4013      	ands	r3, r2
 8002636:	d00b      	beq.n	8002650 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	4a34      	ldr	r2, [pc, #208]	; (8002710 <UART_AdvFeatureConfig+0x150>)
 8002640:	4013      	ands	r3, r2
 8002642:	0019      	movs	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002654:	2210      	movs	r2, #16
 8002656:	4013      	ands	r3, r2
 8002658:	d00b      	beq.n	8002672 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <UART_AdvFeatureConfig+0x154>)
 8002662:	4013      	ands	r3, r2
 8002664:	0019      	movs	r1, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002676:	2220      	movs	r2, #32
 8002678:	4013      	ands	r3, r2
 800267a:	d00b      	beq.n	8002694 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4a25      	ldr	r2, [pc, #148]	; (8002718 <UART_AdvFeatureConfig+0x158>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	4013      	ands	r3, r2
 800269c:	d01d      	beq.n	80026da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <UART_AdvFeatureConfig+0x15c>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	035b      	lsls	r3, r3, #13
 80026be:	429a      	cmp	r2, r3
 80026c0:	d10b      	bne.n	80026da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a15      	ldr	r2, [pc, #84]	; (8002720 <UART_AdvFeatureConfig+0x160>)
 80026ca:	4013      	ands	r3, r2
 80026cc:	0019      	movs	r1, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	430a      	orrs	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	2280      	movs	r2, #128	; 0x80
 80026e0:	4013      	ands	r3, r2
 80026e2:	d00b      	beq.n	80026fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <UART_AdvFeatureConfig+0x164>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	0019      	movs	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	605a      	str	r2, [r3, #4]
  }
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}
 8002704:	fffdffff 	.word	0xfffdffff
 8002708:	fffeffff 	.word	0xfffeffff
 800270c:	fffbffff 	.word	0xfffbffff
 8002710:	ffff7fff 	.word	0xffff7fff
 8002714:	ffffefff 	.word	0xffffefff
 8002718:	ffffdfff 	.word	0xffffdfff
 800271c:	ffefffff 	.word	0xffefffff
 8002720:	ff9fffff 	.word	0xff9fffff
 8002724:	fff7ffff 	.word	0xfff7ffff

08002728 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af02      	add	r7, sp, #8
 800272e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002736:	f7fe f8c3 	bl	80008c0 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	2b08      	cmp	r3, #8
 800274a:	d10d      	bne.n	8002768 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	0399      	lsls	r1, r3, #14
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <UART_CheckIdleState+0x88>)
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	0013      	movs	r3, r2
 800275a:	2200      	movs	r2, #0
 800275c:	f000 f82a 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 8002760:	1e03      	subs	r3, r0, #0
 8002762:	d001      	beq.n	8002768 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e01f      	b.n	80027a8 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2204      	movs	r2, #4
 8002770:	4013      	ands	r3, r2
 8002772:	2b04      	cmp	r3, #4
 8002774:	d10d      	bne.n	8002792 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	03d9      	lsls	r1, r3, #15
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <UART_CheckIdleState+0x88>)
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	0013      	movs	r3, r2
 8002784:	2200      	movs	r2, #0
 8002786:	f000 f815 	bl	80027b4 <UART_WaitOnFlagUntilTimeout>
 800278a:	1e03      	subs	r3, r0, #0
 800278c:	d001      	beq.n	8002792 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e00a      	b.n	80027a8 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2220      	movs	r2, #32
 8002796:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2270      	movs	r2, #112	; 0x70
 80027a2:	2100      	movs	r1, #0
 80027a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	01ffffff 	.word	0x01ffffff

080027b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027c4:	e05d      	b.n	8002882 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	3301      	adds	r3, #1
 80027ca:	d05a      	beq.n	8002882 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027cc:	f7fe f878 	bl	80008c0 <HAL_GetTick>
 80027d0:	0002      	movs	r2, r0
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d302      	bcc.n	80027e2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d11b      	bne.n	800281a <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	492f      	ldr	r1, [pc, #188]	; (80028ac <UART_WaitOnFlagUntilTimeout+0xf8>)
 80027ee:	400a      	ands	r2, r1
 80027f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	438a      	bics	r2, r1
 8002800:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2270      	movs	r2, #112	; 0x70
 8002812:	2100      	movs	r1, #0
 8002814:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e043      	b.n	80028a2 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2204      	movs	r2, #4
 8002822:	4013      	ands	r3, r2
 8002824:	d02d      	beq.n	8002882 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	401a      	ands	r2, r3
 8002832:	2380      	movs	r3, #128	; 0x80
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	429a      	cmp	r2, r3
 8002838:	d123      	bne.n	8002882 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4917      	ldr	r1, [pc, #92]	; (80028ac <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002850:	400a      	ands	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2220      	movs	r2, #32
 8002868:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2220      	movs	r2, #32
 8002874:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2270      	movs	r2, #112	; 0x70
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e00f      	b.n	80028a2 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	4013      	ands	r3, r2
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	425a      	negs	r2, r3
 8002892:	4153      	adcs	r3, r2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	001a      	movs	r2, r3
 8002898:	1dfb      	adds	r3, r7, #7
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d092      	beq.n	80027c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	0018      	movs	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	b004      	add	sp, #16
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	fffffe5f 	.word	0xfffffe5f

080028b0 <__libc_init_array>:
 80028b0:	b570      	push	{r4, r5, r6, lr}
 80028b2:	2600      	movs	r6, #0
 80028b4:	4d0c      	ldr	r5, [pc, #48]	; (80028e8 <__libc_init_array+0x38>)
 80028b6:	4c0d      	ldr	r4, [pc, #52]	; (80028ec <__libc_init_array+0x3c>)
 80028b8:	1b64      	subs	r4, r4, r5
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	42a6      	cmp	r6, r4
 80028be:	d109      	bne.n	80028d4 <__libc_init_array+0x24>
 80028c0:	2600      	movs	r6, #0
 80028c2:	f000 f821 	bl	8002908 <_init>
 80028c6:	4d0a      	ldr	r5, [pc, #40]	; (80028f0 <__libc_init_array+0x40>)
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <__libc_init_array+0x44>)
 80028ca:	1b64      	subs	r4, r4, r5
 80028cc:	10a4      	asrs	r4, r4, #2
 80028ce:	42a6      	cmp	r6, r4
 80028d0:	d105      	bne.n	80028de <__libc_init_array+0x2e>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	00b3      	lsls	r3, r6, #2
 80028d6:	58eb      	ldr	r3, [r5, r3]
 80028d8:	4798      	blx	r3
 80028da:	3601      	adds	r6, #1
 80028dc:	e7ee      	b.n	80028bc <__libc_init_array+0xc>
 80028de:	00b3      	lsls	r3, r6, #2
 80028e0:	58eb      	ldr	r3, [r5, r3]
 80028e2:	4798      	blx	r3
 80028e4:	3601      	adds	r6, #1
 80028e6:	e7f2      	b.n	80028ce <__libc_init_array+0x1e>
 80028e8:	08002958 	.word	0x08002958
 80028ec:	08002958 	.word	0x08002958
 80028f0:	08002958 	.word	0x08002958
 80028f4:	0800295c 	.word	0x0800295c

080028f8 <memset>:
 80028f8:	0003      	movs	r3, r0
 80028fa:	1812      	adds	r2, r2, r0
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d100      	bne.n	8002902 <memset+0xa>
 8002900:	4770      	bx	lr
 8002902:	7019      	strb	r1, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	e7f9      	b.n	80028fc <memset+0x4>

08002908 <_init>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr

08002914 <_fini>:
 8002914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002916:	46c0      	nop			; (mov r8, r8)
 8002918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800291a:	bc08      	pop	{r3}
 800291c:	469e      	mov	lr, r3
 800291e:	4770      	bx	lr
